
198 LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003518  08003518  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003520  08003520  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003520  08003520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003524  08003524  00013524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000005c  08003584  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08003584  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c92  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017f7  00000000  00000000  00028d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  0002a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c9  00000000  00000000  0002acf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016bf7  00000000  00000000  0002b2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a2b2  00000000  00000000  00041eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000908cb  00000000  00000000  0004c162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002328  00000000  00000000  000dca30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000ded58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003484 	.word	0x08003484

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003484 	.word	0x08003484

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800059a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800059e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80005a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005a6:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80005a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005aa:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80005ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005ae:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f80e 	bl	80005e2 <Lcd_init>

	return lcd;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	461d      	mov	r5, r3
 80005ca:	f107 0410 	add.w	r4, r7, #16
 80005ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005d6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005da:	68f8      	ldr	r0, [r7, #12]
 80005dc:	3728      	adds	r7, #40	; 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bdb0      	pop	{r4, r5, r7, pc}

080005e2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7d9b      	ldrb	r3, [r3, #22]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d10c      	bne.n	800060c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80005f2:	2133      	movs	r1, #51	; 0x33
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f87b 	bl	80006f0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80005fa:	2132      	movs	r1, #50	; 0x32
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f877 	bl	80006f0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000602:	2128      	movs	r1, #40	; 0x28
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f873 	bl	80006f0 <lcd_write_command>
 800060a:	e003      	b.n	8000614 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800060c:	2138      	movs	r1, #56	; 0x38
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f86e 	bl	80006f0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000614:	2101      	movs	r1, #1
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f86a 	bl	80006f0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 800061c:	210c      	movs	r1, #12
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f866 	bl	80006f0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000624:	2106      	movs	r1, #6
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 f862 	bl	80006f0 <lcd_write_command>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	4906      	ldr	r1, [pc, #24]	; (8000660 <Lcd_int+0x2c>)
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fa78 	bl	8002b3c <siprintf>

	Lcd_string(lcd, buffer);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4619      	mov	r1, r3
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f000 f806 	bl	8000664 <Lcd_string>
}
 8000658:	bf00      	nop
 800065a:	3718      	adds	r7, #24
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	0800349c 	.word	0x0800349c

08000664 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800066e:	2300      	movs	r3, #0
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	e00a      	b.n	800068a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f000 f864 	bl	800074c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	3301      	adds	r3, #1
 8000688:	73fb      	strb	r3, [r7, #15]
 800068a:	7bfc      	ldrb	r4, [r7, #15]
 800068c:	6838      	ldr	r0, [r7, #0]
 800068e:	f7ff fda7 	bl	80001e0 <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	429c      	cmp	r4, r3
 8000696:	d3ed      	bcc.n	8000674 <Lcd_string+0x10>
	}
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd90      	pop	{r4, r7, pc}
	...

080006a4 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	70fb      	strb	r3, [r7, #3]
 80006b0:	4613      	mov	r3, r2
 80006b2:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <Lcd_cursor+0x30>)
 80006b8:	5cd2      	ldrb	r2, [r2, r3]
 80006ba:	78bb      	ldrb	r3, [r7, #2]
 80006bc:	4413      	add	r3, r2
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	3b80      	subs	r3, #128	; 0x80
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4619      	mov	r1, r3
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 f812 	bl	80006f0 <lcd_write_command>
	#endif
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	080034c8 	.word	0x080034c8

080006d8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80006e0:	2101      	movs	r1, #1
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f000 f804 	bl	80006f0 <lcd_write_command>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6898      	ldr	r0, [r3, #8]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	899b      	ldrh	r3, [r3, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	4619      	mov	r1, r3
 8000708:	f001 faa4 	bl	8001c54 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7d9b      	ldrb	r3, [r3, #22]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d111      	bne.n	8000738 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	091b      	lsrs	r3, r3, #4
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2204      	movs	r2, #4
 800071c:	4619      	mov	r1, r3
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 f842 	bl	80007a8 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	f003 030f 	and.w	r3, r3, #15
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2204      	movs	r2, #4
 800072e:	4619      	mov	r1, r3
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 f839 	bl	80007a8 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000736:	e005      	b.n	8000744 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	2208      	movs	r2, #8
 800073c:	4619      	mov	r1, r3
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 f832 	bl	80007a8 <lcd_write>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6898      	ldr	r0, [r3, #8]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	899b      	ldrh	r3, [r3, #12]
 8000760:	2201      	movs	r2, #1
 8000762:	4619      	mov	r1, r3
 8000764:	f001 fa76 	bl	8001c54 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7d9b      	ldrb	r3, [r3, #22]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d111      	bne.n	8000794 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	091b      	lsrs	r3, r3, #4
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2204      	movs	r2, #4
 8000778:	4619      	mov	r1, r3
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f000 f814 	bl	80007a8 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2204      	movs	r2, #4
 800078a:	4619      	mov	r1, r3
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 f80b 	bl	80007a8 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000792:	e005      	b.n	80007a0 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	2208      	movs	r2, #8
 8000798:	4619      	mov	r1, r3
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f804 	bl	80007a8 <lcd_write>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	70fb      	strb	r3, [r7, #3]
 80007b4:	4613      	mov	r3, r2
 80007b6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80007b8:	2300      	movs	r3, #0
 80007ba:	73fb      	strb	r3, [r7, #15]
 80007bc:	e019      	b.n	80007f2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	6818      	ldr	r0, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	685a      	ldr	r2, [r3, #4]
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	8819      	ldrh	r1, [r3, #0]
 80007d6:	78fa      	ldrb	r2, [r7, #3]
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	fa42 f303 	asr.w	r3, r2, r3
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	461a      	mov	r2, r3
 80007e8:	f001 fa34 	bl	8001c54 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	3301      	adds	r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]
 80007f2:	7bfa      	ldrb	r2, [r7, #15]
 80007f4:	78bb      	ldrb	r3, [r7, #2]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d3e1      	bcc.n	80007be <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6918      	ldr	r0, [r3, #16]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	8a9b      	ldrh	r3, [r3, #20]
 8000802:	2201      	movs	r2, #1
 8000804:	4619      	mov	r1, r3
 8000806:	f001 fa25 	bl	8001c54 <HAL_GPIO_WritePin>
	DELAY(1);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 fbe6 	bl	8000fdc <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6918      	ldr	r0, [r3, #16]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	8a9b      	ldrh	r3, [r3, #20]
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	f001 fa1a 	bl	8001c54 <HAL_GPIO_WritePin>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000828:	b5b0      	push	{r4, r5, r7, lr}
 800082a:	b098      	sub	sp, #96	; 0x60
 800082c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f000 fb63 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f88d 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f973 	bl	8000b20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800083a:	f000 f947 	bl	8000acc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800083e:	f000 f8f3 	bl	8000a28 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
  Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 8000842:	4b30      	ldr	r3, [pc, #192]	; (8000904 <main+0xdc>)
 8000844:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800084a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
  Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6};
 800084e:	4a2e      	ldr	r2, [pc, #184]	; (8000908 <main+0xe0>)
 8000850:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000858:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
  lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 800085c:	4638      	mov	r0, r7
 800085e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000862:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000866:	2300      	movs	r3, #0
 8000868:	9303      	str	r3, [sp, #12]
 800086a:	2310      	movs	r3, #16
 800086c:	9302      	str	r3, [sp, #8]
 800086e:	4b27      	ldr	r3, [pc, #156]	; (800090c <main+0xe4>)
 8000870:	9301      	str	r3, [sp, #4]
 8000872:	2320      	movs	r3, #32
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	4b25      	ldr	r3, [pc, #148]	; (800090c <main+0xe4>)
 8000878:	f7ff fe88 	bl	800058c <Lcd_create>
 800087c:	f107 041c 	add.w	r4, r7, #28
 8000880:	463d      	mov	r5, r7
 8000882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000886:	e895 0003 	ldmia.w	r5, {r0, r1}
 800088a:	e884 0003 	stmia.w	r4, {r0, r1}
  /*  for ( int x = 1; x <= 200 ; x++ ){
      Lcd_cursor(&lcd, 1, 7);
      Lcd_int(&lcd, x);
      HAL_Delay (1000);
    }*/
    MX_ADC1_Init();
 800088e:	f000 f8cb 	bl	8000a28 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    Lcd_clear(&lcd);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff1e 	bl	80006d8 <Lcd_clear>

    Lcd_cursor(&lcd, 0, 1);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	2201      	movs	r2, #1
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fefd 	bl	80006a4 <Lcd_cursor>
    Lcd_string(&lcd, "Heart Rate: ");
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4918      	ldr	r1, [pc, #96]	; (8000910 <main+0xe8>)
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fed7 	bl	8000664 <Lcd_string>
      HAL_ADC_Start(&hadc1);
 80008b6:	4817      	ldr	r0, [pc, #92]	; (8000914 <main+0xec>)
 80008b8:	f000 fbf8 	bl	80010ac <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80008bc:	f04f 31ff 	mov.w	r1, #4294967295
 80008c0:	4814      	ldr	r0, [pc, #80]	; (8000914 <main+0xec>)
 80008c2:	f000 fca7 	bl	8001214 <HAL_ADC_PollForConversion>
      adcValue = HAL_ADC_GetValue(&hadc1);
 80008c6:	4813      	ldr	r0, [pc, #76]	; (8000914 <main+0xec>)
 80008c8:	f000 fd2f 	bl	800132a <HAL_ADC_GetValue>
 80008cc:	4603      	mov	r3, r0
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <main+0xf0>)
 80008d2:	801a      	strh	r2, [r3, #0]

      // Convert ADC value to heart rate (adjust this based on sensor characteristics)
      int heartRate = convertToHeartRate(adcValue);
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <main+0xf0>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 f81f 	bl	800091c <convertToHeartRate>
 80008de:	64f8      	str	r0, [r7, #76]	; 0x4c

      // Display the heart rate on the LCD
      Lcd_cursor(&lcd, 1, 7);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	2207      	movs	r2, #7
 80008e6:	2101      	movs	r1, #1
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fedb 	bl	80006a4 <Lcd_cursor>
      Lcd_int(&lcd, heartRate);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe9d 	bl	8000634 <Lcd_int>

      // Delay or other processing...
      HAL_Delay(1000);//changed from 1000 to 1500
 80008fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fe:	f000 fb6d 	bl	8000fdc <HAL_Delay>
    {
 8000902:	e7c6      	b.n	8000892 <main+0x6a>
 8000904:	080034b0 	.word	0x080034b0
 8000908:	080034c0 	.word	0x080034c0
 800090c:	40020400 	.word	0x40020400
 8000910:	080034a0 	.word	0x080034a0
 8000914:	20000078 	.word	0x20000078
 8000918:	200000c0 	.word	0x200000c0

0800091c <convertToHeartRate>:
    }
  }

int convertToHeartRate(uint16_t adcValue)
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
  // Example conversion, adjust based on sensor characteristics
  // This is a simple linear conversion for demonstration purposes
  // You need to calibrate this based on your sensor's behavior
  int heartRate = (adcValue * 100) / 4095;
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	2264      	movs	r2, #100	; 0x64
 800092a:	fb02 f303 	mul.w	r3, r2, r3
 800092e:	4a07      	ldr	r2, [pc, #28]	; (800094c <convertToHeartRate+0x30>)
 8000930:	fb82 1203 	smull	r1, r2, r2, r3
 8000934:	441a      	add	r2, r3
 8000936:	12d2      	asrs	r2, r2, #11
 8000938:	17db      	asrs	r3, r3, #31
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	60fb      	str	r3, [r7, #12]

  return heartRate;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	80080081 	.word	0x80080081

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	; 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	2230      	movs	r2, #48	; 0x30
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f002 f90c 	bl	8002b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <SystemClock_Config+0xd0>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a28      	ldr	r2, [pc, #160]	; (8000a20 <SystemClock_Config+0xd0>)
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <SystemClock_Config+0xd0>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <SystemClock_Config+0xd4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800099c:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <SystemClock_Config+0xd4>)
 800099e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <SystemClock_Config+0xd4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b4:	2301      	movs	r3, #1
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b8:	2310      	movs	r3, #16
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009bc:	2302      	movs	r3, #2
 80009be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c0:	2300      	movs	r3, #0
 80009c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009c4:	2310      	movs	r3, #16
 80009c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ce:	2304      	movs	r3, #4
 80009d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009d2:	2307      	movs	r3, #7
 80009d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f954 	bl	8001c88 <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009e6:	f000 f931 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ee:	2302      	movs	r3, #2
 80009f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2102      	movs	r1, #2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fbb6 	bl	8002178 <HAL_RCC_ClockConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a12:	f000 f91b 	bl	8000c4c <Error_Handler>
  }
}
 8000a16:	bf00      	nop
 8000a18:	3750      	adds	r7, #80	; 0x50
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a2e:	463b      	mov	r3, r7
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <MX_ADC1_Init+0x98>)
 8000a3c:	4a21      	ldr	r2, [pc, #132]	; (8000ac4 <MX_ADC1_Init+0x9c>)
 8000a3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <MX_ADC1_Init+0x98>)
 8000a42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a48:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_ADC1_Init+0x98>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <MX_ADC1_Init+0x98>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_ADC1_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_ADC1_Init+0x98>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_ADC1_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_ADC1_Init+0x98>)
 8000a6a:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <MX_ADC1_Init+0xa0>)
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_ADC1_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_ADC1_Init+0x98>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_ADC1_Init+0x98>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_ADC1_Init+0x98>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_ADC1_Init+0x98>)
 8000a8a:	f000 facb 	bl	8001024 <HAL_ADC_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a94:	f000 f8da 	bl	8000c4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa4:	463b      	mov	r3, r7
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <MX_ADC1_Init+0x98>)
 8000aaa:	f000 fc4b 	bl	8001344 <HAL_ADC_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ab4:	f000 f8ca 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000078 	.word	0x20000078
 8000ac4:	40012000 	.word	0x40012000
 8000ac8:	0f000001 	.word	0x0f000001

08000acc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <MX_USART2_UART_Init+0x50>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_USART2_UART_Init+0x4c>)
 8000b04:	f001 fd58 	bl	80025b8 <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b0e:	f000 f89d 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000c4 	.word	0x200000c4
 8000b1c:	40004400 	.word	0x40004400

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b40      	ldr	r3, [pc, #256]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a3f      	ldr	r2, [pc, #252]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000b40:	f043 0304 	orr.w	r3, r3, #4
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b3d      	ldr	r3, [pc, #244]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0304 	and.w	r3, r3, #4
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b39      	ldr	r3, [pc, #228]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a38      	ldr	r2, [pc, #224]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a31      	ldr	r2, [pc, #196]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a2a      	ldr	r2, [pc, #168]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <MX_GPIO_Init+0x11c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	21e0      	movs	r1, #224	; 0xe0
 8000baa:	4825      	ldr	r0, [pc, #148]	; (8000c40 <MX_GPIO_Init+0x120>)
 8000bac:	f001 f852 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	4823      	ldr	r0, [pc, #140]	; (8000c44 <MX_GPIO_Init+0x124>)
 8000bb6:	f001 f84d 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2170      	movs	r1, #112	; 0x70
 8000bbe:	4822      	ldr	r0, [pc, #136]	; (8000c48 <MX_GPIO_Init+0x128>)
 8000bc0:	f001 f848 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	481a      	ldr	r0, [pc, #104]	; (8000c44 <MX_GPIO_Init+0x124>)
 8000bdc:	f000 feb6 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000be0:	23e0      	movs	r3, #224	; 0xe0
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4812      	ldr	r0, [pc, #72]	; (8000c40 <MX_GPIO_Init+0x120>)
 8000bf8:	f000 fea8 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MX_GPIO_Init+0x124>)
 8000c14:	f000 fe9a 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000c18:	2370      	movs	r3, #112	; 0x70
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <MX_GPIO_Init+0x128>)
 8000c30:	f000 fe8c 	bl	800194c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40020800 	.word	0x40020800
 8000c48:	40020400 	.word	0x40020400

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c96:	2007      	movs	r0, #7
 8000c98:	f000 fe24 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <HAL_ADC_MspInit+0x7c>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d127      	bne.n	8000d1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <HAL_ADC_MspInit+0x80>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <HAL_ADC_MspInit+0x80>)
 8000cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <HAL_ADC_MspInit+0x80>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <HAL_ADC_MspInit+0x80>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <HAL_ADC_MspInit+0x80>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_ADC_MspInit+0x80>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d02:	2301      	movs	r3, #1
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d06:	2303      	movs	r3, #3
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <HAL_ADC_MspInit+0x84>)
 8000d16:	f000 fe19 	bl	800194c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40012000 	.word	0x40012000
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <HAL_UART_MspInit+0x84>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d12b      	bne.n	8000daa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_UART_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d8a:	230c      	movs	r3, #12
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_UART_MspInit+0x8c>)
 8000da6:	f000 fdd1 	bl	800194c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40004400 	.word	0x40004400
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <UsageFault_Handler+0x4>

08000dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0c:	f000 f8c6 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f001 fea2 	bl	8002b8c <__errno>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20018000 	.word	0x20018000
 8000e74:	00000400 	.word	0x00000400
 8000e78:	20000108 	.word	0x20000108
 8000e7c:	20000258 	.word	0x20000258

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <SystemInit+0x20>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <SystemInit+0x20>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000edc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eaa:	490e      	ldr	r1, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eac:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec0:	4c0b      	ldr	r4, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ece:	f7ff ffd7 	bl	8000e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f001 fe61 	bl	8002b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff fca7 	bl	8000828 <main>
  bx  lr    
 8000eda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000edc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ee8:	08003528 	.word	0x08003528
  ldr r2, =_sbss
 8000eec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ef0:	20000258 	.word	0x20000258

08000ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_Init+0x40>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_Init+0x40>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_Init+0x40>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 fcdf 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f808 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff fe94 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x54>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x58>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 fce9 	bl	8001932 <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 fcbf 	bl	80018fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <HAL_InitTick+0x5c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	2000010c 	.word	0x2000010c

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2000010c 	.word	0x2000010c

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_Delay+0x44>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffde 	bl	8000fc4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008

08001024 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e033      	b.n	80010a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	2b00      	cmp	r3, #0
 8001040:	d109      	bne.n	8001056 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fe30 	bl	8000ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	2b00      	cmp	r3, #0
 8001060:	d118      	bne.n	8001094 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800106a:	f023 0302 	bic.w	r3, r3, #2
 800106e:	f043 0202 	orr.w	r2, r3, #2
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 fa86 	bl	8001588 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f023 0303 	bic.w	r3, r3, #3
 800108a:	f043 0201 	orr.w	r2, r3, #1
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	641a      	str	r2, [r3, #64]	; 0x40
 8001092:	e001      	b.n	8001098 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Start+0x1a>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e097      	b.n	80011f6 <HAL_ADC_Start+0x14a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d018      	beq.n	800110e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0201 	orr.w	r2, r2, #1
 80010ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010ec:	4b45      	ldr	r3, [pc, #276]	; (8001204 <HAL_ADC_Start+0x158>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a45      	ldr	r2, [pc, #276]	; (8001208 <HAL_ADC_Start+0x15c>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	0c9a      	lsrs	r2, r3, #18
 80010f8:	4613      	mov	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001100:	e002      	b.n	8001108 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	3b01      	subs	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f9      	bne.n	8001102 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b01      	cmp	r3, #1
 800111a:	d15f      	bne.n	80011dc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001124:	f023 0301 	bic.w	r3, r3, #1
 8001128:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113a:	2b00      	cmp	r3, #0
 800113c:	d007      	beq.n	800114e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001146:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800115a:	d106      	bne.n	800116a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001160:	f023 0206 	bic.w	r2, r3, #6
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	645a      	str	r2, [r3, #68]	; 0x44
 8001168:	e002      	b.n	8001170 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <HAL_ADC_Start+0x160>)
 800117a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001184:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 031f 	and.w	r3, r3, #31
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10f      	bne.n	80011b2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d129      	bne.n	80011f4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	e020      	b.n	80011f4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a16      	ldr	r2, [pc, #88]	; (8001210 <HAL_ADC_Start+0x164>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d11b      	bne.n	80011f4 <HAL_ADC_Start+0x148>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d114      	bne.n	80011f4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	e00b      	b.n	80011f4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f043 0210 	orr.w	r2, r3, #16
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ec:	f043 0201 	orr.w	r2, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000000 	.word	0x20000000
 8001208:	431bde83 	.word	0x431bde83
 800120c:	40012300 	.word	0x40012300
 8001210:	40012000 	.word	0x40012000

08001214 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001230:	d113      	bne.n	800125a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800123c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001240:	d10b      	bne.n	800125a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f043 0220 	orr.w	r2, r3, #32
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e063      	b.n	8001322 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800125a:	f7ff feb3 	bl	8000fc4 <HAL_GetTick>
 800125e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001260:	e021      	b.n	80012a6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d01d      	beq.n	80012a6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d007      	beq.n	8001280 <HAL_ADC_PollForConversion+0x6c>
 8001270:	f7ff fea8 	bl	8000fc4 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d212      	bcs.n	80012a6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b02      	cmp	r3, #2
 800128c:	d00b      	beq.n	80012a6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f043 0204 	orr.w	r2, r3, #4
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e03d      	b.n	8001322 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d1d6      	bne.n	8001262 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f06f 0212 	mvn.w	r2, #18
 80012bc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d123      	bne.n	8001320 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d11f      	bne.n	8001320 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d111      	bne.n	8001320 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d105      	bne.n	8001320 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f043 0201 	orr.w	r2, r3, #1
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001358:	2b01      	cmp	r3, #1
 800135a:	d101      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x1c>
 800135c:	2302      	movs	r3, #2
 800135e:	e105      	b.n	800156c <HAL_ADC_ConfigChannel+0x228>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b09      	cmp	r3, #9
 800136e:	d925      	bls.n	80013bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68d9      	ldr	r1, [r3, #12]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	b29b      	uxth	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	3b1e      	subs	r3, #30
 8001386:	2207      	movs	r2, #7
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43da      	mvns	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	400a      	ands	r2, r1
 8001394:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68d9      	ldr	r1, [r3, #12]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	4603      	mov	r3, r0
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4403      	add	r3, r0
 80013ae:	3b1e      	subs	r3, #30
 80013b0:	409a      	lsls	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	e022      	b.n	8001402 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6919      	ldr	r1, [r3, #16]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	2207      	movs	r2, #7
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	400a      	ands	r2, r1
 80013de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6919      	ldr	r1, [r3, #16]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	689a      	ldr	r2, [r3, #8]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	4603      	mov	r3, r0
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4403      	add	r3, r0
 80013f8:	409a      	lsls	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b06      	cmp	r3, #6
 8001408:	d824      	bhi.n	8001454 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	3b05      	subs	r3, #5
 800141c:	221f      	movs	r2, #31
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	400a      	ands	r2, r1
 800142a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	3b05      	subs	r3, #5
 8001446:	fa00 f203 	lsl.w	r2, r0, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	635a      	str	r2, [r3, #52]	; 0x34
 8001452:	e04c      	b.n	80014ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b0c      	cmp	r3, #12
 800145a:	d824      	bhi.n	80014a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	3b23      	subs	r3, #35	; 0x23
 800146e:	221f      	movs	r2, #31
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43da      	mvns	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	400a      	ands	r2, r1
 800147c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4618      	mov	r0, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	3b23      	subs	r3, #35	; 0x23
 8001498:	fa00 f203 	lsl.w	r2, r0, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
 80014a4:	e023      	b.n	80014ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	3b41      	subs	r3, #65	; 0x41
 80014b8:	221f      	movs	r2, #31
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	400a      	ands	r2, r1
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	3b41      	subs	r3, #65	; 0x41
 80014e2:	fa00 f203 	lsl.w	r2, r0, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_ADC_ConfigChannel+0x234>)
 80014f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a21      	ldr	r2, [pc, #132]	; (800157c <HAL_ADC_ConfigChannel+0x238>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d109      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x1cc>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b12      	cmp	r3, #18
 8001502:	d105      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a19      	ldr	r2, [pc, #100]	; (800157c <HAL_ADC_ConfigChannel+0x238>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d123      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x21e>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b10      	cmp	r3, #16
 8001520:	d003      	beq.n	800152a <HAL_ADC_ConfigChannel+0x1e6>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b11      	cmp	r3, #17
 8001528:	d11b      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b10      	cmp	r3, #16
 800153c:	d111      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_ADC_ConfigChannel+0x23c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_ADC_ConfigChannel+0x240>)
 8001544:	fba2 2303 	umull	r2, r3, r2, r3
 8001548:	0c9a      	lsrs	r2, r3, #18
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001554:	e002      	b.n	800155c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	3b01      	subs	r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f9      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40012300 	.word	0x40012300
 800157c:	40012000 	.word	0x40012000
 8001580:	20000000 	.word	0x20000000
 8001584:	431bde83 	.word	0x431bde83

08001588 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001590:	4b79      	ldr	r3, [pc, #484]	; (8001778 <ADC_Init+0x1f0>)
 8001592:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	431a      	orrs	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	021a      	lsls	r2, r3, #8
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001602:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6899      	ldr	r1, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	4a58      	ldr	r2, [pc, #352]	; (800177c <ADC_Init+0x1f4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d022      	beq.n	8001666 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800162e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6899      	ldr	r1, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6899      	ldr	r1, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	e00f      	b.n	8001686 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001684:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0202 	bic.w	r2, r2, #2
 8001694:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6899      	ldr	r1, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7e1b      	ldrb	r3, [r3, #24]
 80016a0:	005a      	lsls	r2, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d01b      	beq.n	80016ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6859      	ldr	r1, [r3, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	3b01      	subs	r3, #1
 80016e0:	035a      	lsls	r2, r3, #13
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	430a      	orrs	r2, r1
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	e007      	b.n	80016fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	3b01      	subs	r3, #1
 8001718:	051a      	lsls	r2, r3, #20
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001730:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6899      	ldr	r1, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800173e:	025a      	lsls	r2, r3, #9
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001756:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6899      	ldr	r1, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	029a      	lsls	r2, r3, #10
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	609a      	str	r2, [r3, #8]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40012300 	.word	0x40012300
 800177c:	0f000001 	.word	0x0f000001

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	; (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	; (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff47 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190c:	f7ff ff5c 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 8001910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	6978      	ldr	r0, [r7, #20]
 8001918:	f7ff ff8e 	bl	8001838 <NVIC_EncodePriority>
 800191c:	4602      	mov	r2, r0
 800191e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001922:	4611      	mov	r1, r2
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff5d 	bl	80017e4 <__NVIC_SetPriority>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffb0 	bl	80018a0 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	e159      	b.n	8001c1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001968:	2201      	movs	r2, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	429a      	cmp	r2, r3
 8001982:	f040 8148 	bne.w	8001c16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d005      	beq.n	800199e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199a:	2b02      	cmp	r3, #2
 800199c:	d130      	bne.n	8001a00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 0201 	and.w	r2, r3, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d017      	beq.n	8001a3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d123      	bne.n	8001a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3208      	adds	r2, #8
 8001a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	220f      	movs	r2, #15
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	691a      	ldr	r2, [r3, #16]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	08da      	lsrs	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3208      	adds	r2, #8
 8001a8a:	69b9      	ldr	r1, [r7, #24]
 8001a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0203 	and.w	r2, r3, #3
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a2 	beq.w	8001c16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	4a56      	ldr	r2, [pc, #344]	; (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae2:	4b54      	ldr	r3, [pc, #336]	; (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aee:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <HAL_GPIO_Init+0x2ec>)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a49      	ldr	r2, [pc, #292]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0x202>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a48      	ldr	r2, [pc, #288]	; (8001c40 <HAL_GPIO_Init+0x2f4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x1fe>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a47      	ldr	r2, [pc, #284]	; (8001c44 <HAL_GPIO_Init+0x2f8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x1fa>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a46      	ldr	r2, [pc, #280]	; (8001c48 <HAL_GPIO_Init+0x2fc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x1f6>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a45      	ldr	r2, [pc, #276]	; (8001c4c <HAL_GPIO_Init+0x300>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x1f2>
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	e008      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b3e:	2307      	movs	r3, #7
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e004      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e002      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x204>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	f002 0203 	and.w	r2, r2, #3
 8001b56:	0092      	lsls	r2, r2, #2
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b60:	4935      	ldr	r1, [pc, #212]	; (8001c38 <HAL_GPIO_Init+0x2ec>)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3302      	adds	r3, #2
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b6e:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b92:	4a2f      	ldr	r2, [pc, #188]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bbc:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bc2:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001be6:	4a1a      	ldr	r2, [pc, #104]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c10:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <HAL_GPIO_Init+0x304>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b0f      	cmp	r3, #15
 8001c20:	f67f aea2 	bls.w	8001968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40013800 	.word	0x40013800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020c00 	.word	0x40020c00
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40013c00 	.word	0x40013c00

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c70:	e003      	b.n	8001c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	041a      	lsls	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	619a      	str	r2, [r3, #24]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e267      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d075      	beq.n	8001d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ca6:	4b88      	ldr	r3, [pc, #544]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d00c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb2:	4b85      	ldr	r3, [pc, #532]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d112      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cbe:	4b82      	ldr	r3, [pc, #520]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cca:	d10b      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	4b7e      	ldr	r3, [pc, #504]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d05b      	beq.n	8001d90 <HAL_RCC_OscConfig+0x108>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d157      	bne.n	8001d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e242      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cec:	d106      	bne.n	8001cfc <HAL_RCC_OscConfig+0x74>
 8001cee:	4b76      	ldr	r3, [pc, #472]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a75      	ldr	r2, [pc, #468]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e01d      	b.n	8001d38 <HAL_RCC_OscConfig+0xb0>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x98>
 8001d06:	4b70      	ldr	r3, [pc, #448]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a6f      	ldr	r2, [pc, #444]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b6d      	ldr	r3, [pc, #436]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a6c      	ldr	r2, [pc, #432]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e00b      	b.n	8001d38 <HAL_RCC_OscConfig+0xb0>
 8001d20:	4b69      	ldr	r3, [pc, #420]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a68      	ldr	r2, [pc, #416]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b66      	ldr	r3, [pc, #408]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a65      	ldr	r2, [pc, #404]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d013      	beq.n	8001d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff f940 	bl	8000fc4 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff f93c 	bl	8000fc4 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e207      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	4b5b      	ldr	r3, [pc, #364]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0xc0>
 8001d66:	e014      	b.n	8001d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff f92c 	bl	8000fc4 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff f928 	bl	8000fc4 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e1f3      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	4b51      	ldr	r3, [pc, #324]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0xe8>
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d063      	beq.n	8001e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d9e:	4b4a      	ldr	r3, [pc, #296]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00b      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001daa:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d11c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db6:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d116      	bne.n	8001df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_RCC_OscConfig+0x152>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e1c7      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dda:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4937      	ldr	r1, [pc, #220]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dee:	e03a      	b.n	8001e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d020      	beq.n	8001e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df8:	4b34      	ldr	r3, [pc, #208]	; (8001ecc <HAL_RCC_OscConfig+0x244>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7ff f8e1 	bl	8000fc4 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e06:	f7ff f8dd 	bl	8000fc4 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e1a8      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4925      	ldr	r1, [pc, #148]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
 8001e38:	e015      	b.n	8001e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <HAL_RCC_OscConfig+0x244>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7ff f8c0 	bl	8000fc4 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e48:	f7ff f8bc 	bl	8000fc4 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e187      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d036      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d016      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_RCC_OscConfig+0x248>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e80:	f7ff f8a0 	bl	8000fc4 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e88:	f7ff f89c 	bl	8000fc4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e167      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x200>
 8001ea6:	e01b      	b.n	8001ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_OscConfig+0x248>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7ff f889 	bl	8000fc4 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	e00e      	b.n	8001ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb6:	f7ff f885 	bl	8000fc4 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d907      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e150      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	42470000 	.word	0x42470000
 8001ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed4:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1ea      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8097 	beq.w	800201c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef2:	4b81      	ldr	r3, [pc, #516]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10f      	bne.n	8001f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	4b7d      	ldr	r3, [pc, #500]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a7c      	ldr	r2, [pc, #496]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b7a      	ldr	r3, [pc, #488]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1e:	4b77      	ldr	r3, [pc, #476]	; (80020fc <HAL_RCC_OscConfig+0x474>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d118      	bne.n	8001f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2a:	4b74      	ldr	r3, [pc, #464]	; (80020fc <HAL_RCC_OscConfig+0x474>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a73      	ldr	r2, [pc, #460]	; (80020fc <HAL_RCC_OscConfig+0x474>)
 8001f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f36:	f7ff f845 	bl	8000fc4 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3e:	f7ff f841 	bl	8000fc4 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e10c      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f50:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <HAL_RCC_OscConfig+0x474>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d106      	bne.n	8001f72 <HAL_RCC_OscConfig+0x2ea>
 8001f64:	4b64      	ldr	r3, [pc, #400]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f68:	4a63      	ldr	r2, [pc, #396]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f70:	e01c      	b.n	8001fac <HAL_RCC_OscConfig+0x324>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b05      	cmp	r3, #5
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x30c>
 8001f7a:	4b5f      	ldr	r3, [pc, #380]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	4a5e      	ldr	r2, [pc, #376]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6713      	str	r3, [r2, #112]	; 0x70
 8001f86:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8a:	4a5b      	ldr	r2, [pc, #364]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6713      	str	r3, [r2, #112]	; 0x70
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0x324>
 8001f94:	4b58      	ldr	r3, [pc, #352]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	4a57      	ldr	r2, [pc, #348]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001f9a:	f023 0301 	bic.w	r3, r3, #1
 8001f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa0:	4b55      	ldr	r3, [pc, #340]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	4a54      	ldr	r2, [pc, #336]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	f023 0304 	bic.w	r3, r3, #4
 8001faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d015      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb4:	f7ff f806 	bl	8000fc4 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fbc:	f7ff f802 	bl	8000fc4 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e0cb      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd2:	4b49      	ldr	r3, [pc, #292]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0ee      	beq.n	8001fbc <HAL_RCC_OscConfig+0x334>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe0:	f7fe fff0 	bl	8000fc4 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe8:	f7fe ffec 	bl	8000fc4 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0b5      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffe:	4b3e      	ldr	r3, [pc, #248]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1ee      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800200a:	7dfb      	ldrb	r3, [r7, #23]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d105      	bne.n	800201c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002010:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	4a38      	ldr	r2, [pc, #224]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8002016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80a1 	beq.w	8002168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002026:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b08      	cmp	r3, #8
 8002030:	d05c      	beq.n	80020ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d141      	bne.n	80020be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	4b31      	ldr	r3, [pc, #196]	; (8002100 <HAL_RCC_OscConfig+0x478>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7fe ffc0 	bl	8000fc4 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe ffbc 	bl	8000fc4 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e087      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	085b      	lsrs	r3, r3, #1
 800207e:	3b01      	subs	r3, #1
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	491b      	ldr	r1, [pc, #108]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x478>)
 8002092:	2201      	movs	r2, #1
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7fe ff95 	bl	8000fc4 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209e:	f7fe ff91 	bl	8000fc4 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e05c      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x416>
 80020bc:	e054      	b.n	8002168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_RCC_OscConfig+0x478>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7fe ff7e 	bl	8000fc4 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020cc:	f7fe ff7a 	bl	8000fc4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e045      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_RCC_OscConfig+0x470>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x444>
 80020ea:	e03d      	b.n	8002168 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d107      	bne.n	8002104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e038      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40007000 	.word	0x40007000
 8002100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_RCC_OscConfig+0x4ec>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d028      	beq.n	8002164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d121      	bne.n	8002164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d11a      	bne.n	8002164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002134:	4013      	ands	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800213a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800213c:	4293      	cmp	r3, r2
 800213e:	d111      	bne.n	8002164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	3b01      	subs	r3, #1
 800214e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d107      	bne.n	8002164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800

08002178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0cc      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4b68      	ldr	r3, [pc, #416]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d90c      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b65      	ldr	r3, [pc, #404]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b63      	ldr	r3, [pc, #396]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0b8      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021cc:	4b59      	ldr	r3, [pc, #356]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a58      	ldr	r2, [pc, #352]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e4:	4b53      	ldr	r3, [pc, #332]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a52      	ldr	r2, [pc, #328]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b50      	ldr	r3, [pc, #320]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	494d      	ldr	r1, [pc, #308]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d044      	beq.n	8002298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b47      	ldr	r3, [pc, #284]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d119      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e07f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d003      	beq.n	8002236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002232:	2b03      	cmp	r3, #3
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	4b3f      	ldr	r3, [pc, #252]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e06f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e067      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002256:	4b37      	ldr	r3, [pc, #220]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f023 0203 	bic.w	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4934      	ldr	r1, [pc, #208]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7fe feac 	bl	8000fc4 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	e00a      	b.n	8002286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002270:	f7fe fea8 	bl	8000fc4 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e04f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 020c 	and.w	r2, r3, #12
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d1eb      	bne.n	8002270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d20c      	bcs.n	80022c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b22      	ldr	r3, [pc, #136]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e032      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4916      	ldr	r1, [pc, #88]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	490e      	ldr	r1, [pc, #56]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022fe:	f000 f821 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8002302:	4602      	mov	r2, r0
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	490a      	ldr	r1, [pc, #40]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	5ccb      	ldrb	r3, [r1, r3]
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	4a09      	ldr	r2, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fe0c 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023c00 	.word	0x40023c00
 8002334:	40023800 	.word	0x40023800
 8002338:	080034cc 	.word	0x080034cc
 800233c:	20000000 	.word	0x20000000
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002348:	b094      	sub	sp, #80	; 0x50
 800234a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	647b      	str	r3, [r7, #68]	; 0x44
 8002350:	2300      	movs	r3, #0
 8002352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002354:	2300      	movs	r3, #0
 8002356:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800235c:	4b79      	ldr	r3, [pc, #484]	; (8002544 <HAL_RCC_GetSysClockFreq+0x200>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d00d      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x40>
 8002368:	2b08      	cmp	r3, #8
 800236a:	f200 80e1 	bhi.w	8002530 <HAL_RCC_GetSysClockFreq+0x1ec>
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x34>
 8002372:	2b04      	cmp	r3, #4
 8002374:	d003      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0x3a>
 8002376:	e0db      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b73      	ldr	r3, [pc, #460]	; (8002548 <HAL_RCC_GetSysClockFreq+0x204>)
 800237a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800237c:	e0db      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800237e:	4b73      	ldr	r3, [pc, #460]	; (800254c <HAL_RCC_GetSysClockFreq+0x208>)
 8002380:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002382:	e0d8      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002384:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <HAL_RCC_GetSysClockFreq+0x200>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800238c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800238e:	4b6d      	ldr	r3, [pc, #436]	; (8002544 <HAL_RCC_GetSysClockFreq+0x200>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d063      	beq.n	8002462 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800239a:	4b6a      	ldr	r3, [pc, #424]	; (8002544 <HAL_RCC_GetSysClockFreq+0x200>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	099b      	lsrs	r3, r3, #6
 80023a0:	2200      	movs	r2, #0
 80023a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80023a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80023a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ac:	633b      	str	r3, [r7, #48]	; 0x30
 80023ae:	2300      	movs	r3, #0
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
 80023b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023b6:	4622      	mov	r2, r4
 80023b8:	462b      	mov	r3, r5
 80023ba:	f04f 0000 	mov.w	r0, #0
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	0159      	lsls	r1, r3, #5
 80023c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023c8:	0150      	lsls	r0, r2, #5
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4621      	mov	r1, r4
 80023d0:	1a51      	subs	r1, r2, r1
 80023d2:	6139      	str	r1, [r7, #16]
 80023d4:	4629      	mov	r1, r5
 80023d6:	eb63 0301 	sbc.w	r3, r3, r1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023e8:	4659      	mov	r1, fp
 80023ea:	018b      	lsls	r3, r1, #6
 80023ec:	4651      	mov	r1, sl
 80023ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023f2:	4651      	mov	r1, sl
 80023f4:	018a      	lsls	r2, r1, #6
 80023f6:	4651      	mov	r1, sl
 80023f8:	ebb2 0801 	subs.w	r8, r2, r1
 80023fc:	4659      	mov	r1, fp
 80023fe:	eb63 0901 	sbc.w	r9, r3, r1
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800240e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002416:	4690      	mov	r8, r2
 8002418:	4699      	mov	r9, r3
 800241a:	4623      	mov	r3, r4
 800241c:	eb18 0303 	adds.w	r3, r8, r3
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	462b      	mov	r3, r5
 8002424:	eb49 0303 	adc.w	r3, r9, r3
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002436:	4629      	mov	r1, r5
 8002438:	024b      	lsls	r3, r1, #9
 800243a:	4621      	mov	r1, r4
 800243c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002440:	4621      	mov	r1, r4
 8002442:	024a      	lsls	r2, r1, #9
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800244a:	2200      	movs	r2, #0
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
 800244e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002450:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002454:	f7fd ff1c 	bl	8000290 <__aeabi_uldivmod>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4613      	mov	r3, r2
 800245e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002460:	e058      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002462:	4b38      	ldr	r3, [pc, #224]	; (8002544 <HAL_RCC_GetSysClockFreq+0x200>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	099b      	lsrs	r3, r3, #6
 8002468:	2200      	movs	r2, #0
 800246a:	4618      	mov	r0, r3
 800246c:	4611      	mov	r1, r2
 800246e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002472:	623b      	str	r3, [r7, #32]
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
 8002478:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800247c:	4642      	mov	r2, r8
 800247e:	464b      	mov	r3, r9
 8002480:	f04f 0000 	mov.w	r0, #0
 8002484:	f04f 0100 	mov.w	r1, #0
 8002488:	0159      	lsls	r1, r3, #5
 800248a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800248e:	0150      	lsls	r0, r2, #5
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4641      	mov	r1, r8
 8002496:	ebb2 0a01 	subs.w	sl, r2, r1
 800249a:	4649      	mov	r1, r9
 800249c:	eb63 0b01 	sbc.w	fp, r3, r1
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024b4:	ebb2 040a 	subs.w	r4, r2, sl
 80024b8:	eb63 050b 	sbc.w	r5, r3, fp
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	00eb      	lsls	r3, r5, #3
 80024c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ca:	00e2      	lsls	r2, r4, #3
 80024cc:	4614      	mov	r4, r2
 80024ce:	461d      	mov	r5, r3
 80024d0:	4643      	mov	r3, r8
 80024d2:	18e3      	adds	r3, r4, r3
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	464b      	mov	r3, r9
 80024d8:	eb45 0303 	adc.w	r3, r5, r3
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ea:	4629      	mov	r1, r5
 80024ec:	028b      	lsls	r3, r1, #10
 80024ee:	4621      	mov	r1, r4
 80024f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f4:	4621      	mov	r1, r4
 80024f6:	028a      	lsls	r2, r1, #10
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024fe:	2200      	movs	r2, #0
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	61fa      	str	r2, [r7, #28]
 8002504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002508:	f7fd fec2 	bl	8000290 <__aeabi_uldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4613      	mov	r3, r2
 8002512:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_GetSysClockFreq+0x200>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002524:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800252e:	e002      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_RCC_GetSysClockFreq+0x204>)
 8002532:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002538:	4618      	mov	r0, r3
 800253a:	3750      	adds	r7, #80	; 0x50
 800253c:	46bd      	mov	sp, r7
 800253e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	00f42400 	.word	0x00f42400
 800254c:	007a1200 	.word	0x007a1200

08002550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_RCC_GetHCLKFreq+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000000 	.word	0x20000000

08002568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800256c:	f7ff fff0 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0a9b      	lsrs	r3, r3, #10
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4903      	ldr	r1, [pc, #12]	; (800258c <HAL_RCC_GetPCLK1Freq+0x24>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	080034dc 	.word	0x080034dc

08002590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002594:	f7ff ffdc 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	0b5b      	lsrs	r3, r3, #13
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4903      	ldr	r1, [pc, #12]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40023800 	.word	0x40023800
 80025b4:	080034dc 	.word	0x080034dc

080025b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e03f      	b.n	800264a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe fba6 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2224      	movs	r2, #36	; 0x24
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f829 	bl	8002654 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002610:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002620:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002630:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002658:	b0c0      	sub	sp, #256	; 0x100
 800265a:	af00      	add	r7, sp, #0
 800265c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800266c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002670:	68d9      	ldr	r1, [r3, #12]
 8002672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	ea40 0301 	orr.w	r3, r0, r1
 800267c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800267e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	431a      	orrs	r2, r3
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	431a      	orrs	r2, r3
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026ac:	f021 010c 	bic.w	r1, r1, #12
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026ba:	430b      	orrs	r3, r1
 80026bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80026ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ce:	6999      	ldr	r1, [r3, #24]
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	ea40 0301 	orr.w	r3, r0, r1
 80026da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4b8f      	ldr	r3, [pc, #572]	; (8002920 <UART_SetConfig+0x2cc>)
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d005      	beq.n	80026f4 <UART_SetConfig+0xa0>
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4b8d      	ldr	r3, [pc, #564]	; (8002924 <UART_SetConfig+0x2d0>)
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d104      	bne.n	80026fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026f4:	f7ff ff4c 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 80026f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026fc:	e003      	b.n	8002706 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026fe:	f7ff ff33 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8002702:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002710:	f040 810c 	bne.w	800292c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002718:	2200      	movs	r2, #0
 800271a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800271e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002722:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002726:	4622      	mov	r2, r4
 8002728:	462b      	mov	r3, r5
 800272a:	1891      	adds	r1, r2, r2
 800272c:	65b9      	str	r1, [r7, #88]	; 0x58
 800272e:	415b      	adcs	r3, r3
 8002730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002732:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002736:	4621      	mov	r1, r4
 8002738:	eb12 0801 	adds.w	r8, r2, r1
 800273c:	4629      	mov	r1, r5
 800273e:	eb43 0901 	adc.w	r9, r3, r1
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800274e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002756:	4690      	mov	r8, r2
 8002758:	4699      	mov	r9, r3
 800275a:	4623      	mov	r3, r4
 800275c:	eb18 0303 	adds.w	r3, r8, r3
 8002760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002764:	462b      	mov	r3, r5
 8002766:	eb49 0303 	adc.w	r3, r9, r3
 800276a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800276e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800277a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800277e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002782:	460b      	mov	r3, r1
 8002784:	18db      	adds	r3, r3, r3
 8002786:	653b      	str	r3, [r7, #80]	; 0x50
 8002788:	4613      	mov	r3, r2
 800278a:	eb42 0303 	adc.w	r3, r2, r3
 800278e:	657b      	str	r3, [r7, #84]	; 0x54
 8002790:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002794:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002798:	f7fd fd7a 	bl	8000290 <__aeabi_uldivmod>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4b61      	ldr	r3, [pc, #388]	; (8002928 <UART_SetConfig+0x2d4>)
 80027a2:	fba3 2302 	umull	r2, r3, r3, r2
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	011c      	lsls	r4, r3, #4
 80027aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ae:	2200      	movs	r2, #0
 80027b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80027b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80027bc:	4642      	mov	r2, r8
 80027be:	464b      	mov	r3, r9
 80027c0:	1891      	adds	r1, r2, r2
 80027c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80027c4:	415b      	adcs	r3, r3
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027cc:	4641      	mov	r1, r8
 80027ce:	eb12 0a01 	adds.w	sl, r2, r1
 80027d2:	4649      	mov	r1, r9
 80027d4:	eb43 0b01 	adc.w	fp, r3, r1
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027ec:	4692      	mov	sl, r2
 80027ee:	469b      	mov	fp, r3
 80027f0:	4643      	mov	r3, r8
 80027f2:	eb1a 0303 	adds.w	r3, sl, r3
 80027f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027fa:	464b      	mov	r3, r9
 80027fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002800:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002810:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002814:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002818:	460b      	mov	r3, r1
 800281a:	18db      	adds	r3, r3, r3
 800281c:	643b      	str	r3, [r7, #64]	; 0x40
 800281e:	4613      	mov	r3, r2
 8002820:	eb42 0303 	adc.w	r3, r2, r3
 8002824:	647b      	str	r3, [r7, #68]	; 0x44
 8002826:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800282a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800282e:	f7fd fd2f 	bl	8000290 <__aeabi_uldivmod>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4611      	mov	r1, r2
 8002838:	4b3b      	ldr	r3, [pc, #236]	; (8002928 <UART_SetConfig+0x2d4>)
 800283a:	fba3 2301 	umull	r2, r3, r3, r1
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	2264      	movs	r2, #100	; 0x64
 8002842:	fb02 f303 	mul.w	r3, r2, r3
 8002846:	1acb      	subs	r3, r1, r3
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <UART_SetConfig+0x2d4>)
 8002850:	fba3 2302 	umull	r2, r3, r3, r2
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800285c:	441c      	add	r4, r3
 800285e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002862:	2200      	movs	r2, #0
 8002864:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002868:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800286c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002870:	4642      	mov	r2, r8
 8002872:	464b      	mov	r3, r9
 8002874:	1891      	adds	r1, r2, r2
 8002876:	63b9      	str	r1, [r7, #56]	; 0x38
 8002878:	415b      	adcs	r3, r3
 800287a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800287c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002880:	4641      	mov	r1, r8
 8002882:	1851      	adds	r1, r2, r1
 8002884:	6339      	str	r1, [r7, #48]	; 0x30
 8002886:	4649      	mov	r1, r9
 8002888:	414b      	adcs	r3, r1
 800288a:	637b      	str	r3, [r7, #52]	; 0x34
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002898:	4659      	mov	r1, fp
 800289a:	00cb      	lsls	r3, r1, #3
 800289c:	4651      	mov	r1, sl
 800289e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028a2:	4651      	mov	r1, sl
 80028a4:	00ca      	lsls	r2, r1, #3
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	4603      	mov	r3, r0
 80028ac:	4642      	mov	r2, r8
 80028ae:	189b      	adds	r3, r3, r2
 80028b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028b4:	464b      	mov	r3, r9
 80028b6:	460a      	mov	r2, r1
 80028b8:	eb42 0303 	adc.w	r3, r2, r3
 80028bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028d4:	460b      	mov	r3, r1
 80028d6:	18db      	adds	r3, r3, r3
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028da:	4613      	mov	r3, r2
 80028dc:	eb42 0303 	adc.w	r3, r2, r3
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80028ea:	f7fd fcd1 	bl	8000290 <__aeabi_uldivmod>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <UART_SetConfig+0x2d4>)
 80028f4:	fba3 1302 	umull	r1, r3, r3, r2
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	2164      	movs	r1, #100	; 0x64
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	3332      	adds	r3, #50	; 0x32
 8002906:	4a08      	ldr	r2, [pc, #32]	; (8002928 <UART_SetConfig+0x2d4>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	f003 0207 	and.w	r2, r3, #7
 8002912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4422      	add	r2, r4
 800291a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800291c:	e106      	b.n	8002b2c <UART_SetConfig+0x4d8>
 800291e:	bf00      	nop
 8002920:	40011000 	.word	0x40011000
 8002924:	40011400 	.word	0x40011400
 8002928:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800292c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002930:	2200      	movs	r2, #0
 8002932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002936:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800293a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800293e:	4642      	mov	r2, r8
 8002940:	464b      	mov	r3, r9
 8002942:	1891      	adds	r1, r2, r2
 8002944:	6239      	str	r1, [r7, #32]
 8002946:	415b      	adcs	r3, r3
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800294e:	4641      	mov	r1, r8
 8002950:	1854      	adds	r4, r2, r1
 8002952:	4649      	mov	r1, r9
 8002954:	eb43 0501 	adc.w	r5, r3, r1
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	00eb      	lsls	r3, r5, #3
 8002962:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002966:	00e2      	lsls	r2, r4, #3
 8002968:	4614      	mov	r4, r2
 800296a:	461d      	mov	r5, r3
 800296c:	4643      	mov	r3, r8
 800296e:	18e3      	adds	r3, r4, r3
 8002970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002974:	464b      	mov	r3, r9
 8002976:	eb45 0303 	adc.w	r3, r5, r3
 800297a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800298a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800299a:	4629      	mov	r1, r5
 800299c:	008b      	lsls	r3, r1, #2
 800299e:	4621      	mov	r1, r4
 80029a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029a4:	4621      	mov	r1, r4
 80029a6:	008a      	lsls	r2, r1, #2
 80029a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80029ac:	f7fd fc70 	bl	8000290 <__aeabi_uldivmod>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4b60      	ldr	r3, [pc, #384]	; (8002b38 <UART_SetConfig+0x4e4>)
 80029b6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	011c      	lsls	r4, r3, #4
 80029be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029c2:	2200      	movs	r2, #0
 80029c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80029d0:	4642      	mov	r2, r8
 80029d2:	464b      	mov	r3, r9
 80029d4:	1891      	adds	r1, r2, r2
 80029d6:	61b9      	str	r1, [r7, #24]
 80029d8:	415b      	adcs	r3, r3
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e0:	4641      	mov	r1, r8
 80029e2:	1851      	adds	r1, r2, r1
 80029e4:	6139      	str	r1, [r7, #16]
 80029e6:	4649      	mov	r1, r9
 80029e8:	414b      	adcs	r3, r1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029f8:	4659      	mov	r1, fp
 80029fa:	00cb      	lsls	r3, r1, #3
 80029fc:	4651      	mov	r1, sl
 80029fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a02:	4651      	mov	r1, sl
 8002a04:	00ca      	lsls	r2, r1, #3
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	189b      	adds	r3, r3, r2
 8002a10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a14:	464b      	mov	r3, r9
 8002a16:	460a      	mov	r2, r1
 8002a18:	eb42 0303 	adc.w	r3, r2, r3
 8002a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a38:	4649      	mov	r1, r9
 8002a3a:	008b      	lsls	r3, r1, #2
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a42:	4641      	mov	r1, r8
 8002a44:	008a      	lsls	r2, r1, #2
 8002a46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a4a:	f7fd fc21 	bl	8000290 <__aeabi_uldivmod>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4611      	mov	r1, r2
 8002a54:	4b38      	ldr	r3, [pc, #224]	; (8002b38 <UART_SetConfig+0x4e4>)
 8002a56:	fba3 2301 	umull	r2, r3, r3, r1
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	2264      	movs	r2, #100	; 0x64
 8002a5e:	fb02 f303 	mul.w	r3, r2, r3
 8002a62:	1acb      	subs	r3, r1, r3
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	3332      	adds	r3, #50	; 0x32
 8002a68:	4a33      	ldr	r2, [pc, #204]	; (8002b38 <UART_SetConfig+0x4e4>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a74:	441c      	add	r4, r3
 8002a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	673b      	str	r3, [r7, #112]	; 0x70
 8002a7e:	677a      	str	r2, [r7, #116]	; 0x74
 8002a80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	1891      	adds	r1, r2, r2
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	415b      	adcs	r3, r3
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a94:	4641      	mov	r1, r8
 8002a96:	1851      	adds	r1, r2, r1
 8002a98:	6039      	str	r1, [r7, #0]
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	414b      	adcs	r3, r1
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002aac:	4659      	mov	r1, fp
 8002aae:	00cb      	lsls	r3, r1, #3
 8002ab0:	4651      	mov	r1, sl
 8002ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	00ca      	lsls	r2, r1, #3
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	189b      	adds	r3, r3, r2
 8002ac4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	460a      	mov	r2, r1
 8002aca:	eb42 0303 	adc.w	r3, r2, r3
 8002ace:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	663b      	str	r3, [r7, #96]	; 0x60
 8002ada:	667a      	str	r2, [r7, #100]	; 0x64
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ae8:	4649      	mov	r1, r9
 8002aea:	008b      	lsls	r3, r1, #2
 8002aec:	4641      	mov	r1, r8
 8002aee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002af2:	4641      	mov	r1, r8
 8002af4:	008a      	lsls	r2, r1, #2
 8002af6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002afa:	f7fd fbc9 	bl	8000290 <__aeabi_uldivmod>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <UART_SetConfig+0x4e4>)
 8002b04:	fba3 1302 	umull	r1, r3, r3, r2
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	2164      	movs	r1, #100	; 0x64
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	3332      	adds	r3, #50	; 0x32
 8002b16:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <UART_SetConfig+0x4e4>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	f003 020f 	and.w	r2, r3, #15
 8002b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4422      	add	r2, r4
 8002b2a:	609a      	str	r2, [r3, #8]
}
 8002b2c:	bf00      	nop
 8002b2e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b32:	46bd      	mov	sp, r7
 8002b34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b38:	51eb851f 	.word	0x51eb851f

08002b3c <siprintf>:
 8002b3c:	b40e      	push	{r1, r2, r3}
 8002b3e:	b500      	push	{lr}
 8002b40:	b09c      	sub	sp, #112	; 0x70
 8002b42:	ab1d      	add	r3, sp, #116	; 0x74
 8002b44:	9002      	str	r0, [sp, #8]
 8002b46:	9006      	str	r0, [sp, #24]
 8002b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b4c:	4809      	ldr	r0, [pc, #36]	; (8002b74 <siprintf+0x38>)
 8002b4e:	9107      	str	r1, [sp, #28]
 8002b50:	9104      	str	r1, [sp, #16]
 8002b52:	4909      	ldr	r1, [pc, #36]	; (8002b78 <siprintf+0x3c>)
 8002b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b58:	9105      	str	r1, [sp, #20]
 8002b5a:	6800      	ldr	r0, [r0, #0]
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	a902      	add	r1, sp, #8
 8002b60:	f000 f992 	bl	8002e88 <_svfiprintf_r>
 8002b64:	9b02      	ldr	r3, [sp, #8]
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	b01c      	add	sp, #112	; 0x70
 8002b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b70:	b003      	add	sp, #12
 8002b72:	4770      	bx	lr
 8002b74:	20000058 	.word	0x20000058
 8002b78:	ffff0208 	.word	0xffff0208

08002b7c <memset>:
 8002b7c:	4402      	add	r2, r0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d100      	bne.n	8002b86 <memset+0xa>
 8002b84:	4770      	bx	lr
 8002b86:	f803 1b01 	strb.w	r1, [r3], #1
 8002b8a:	e7f9      	b.n	8002b80 <memset+0x4>

08002b8c <__errno>:
 8002b8c:	4b01      	ldr	r3, [pc, #4]	; (8002b94 <__errno+0x8>)
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000058 	.word	0x20000058

08002b98 <__libc_init_array>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	4d0d      	ldr	r5, [pc, #52]	; (8002bd0 <__libc_init_array+0x38>)
 8002b9c:	4c0d      	ldr	r4, [pc, #52]	; (8002bd4 <__libc_init_array+0x3c>)
 8002b9e:	1b64      	subs	r4, r4, r5
 8002ba0:	10a4      	asrs	r4, r4, #2
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	42a6      	cmp	r6, r4
 8002ba6:	d109      	bne.n	8002bbc <__libc_init_array+0x24>
 8002ba8:	4d0b      	ldr	r5, [pc, #44]	; (8002bd8 <__libc_init_array+0x40>)
 8002baa:	4c0c      	ldr	r4, [pc, #48]	; (8002bdc <__libc_init_array+0x44>)
 8002bac:	f000 fc6a 	bl	8003484 <_init>
 8002bb0:	1b64      	subs	r4, r4, r5
 8002bb2:	10a4      	asrs	r4, r4, #2
 8002bb4:	2600      	movs	r6, #0
 8002bb6:	42a6      	cmp	r6, r4
 8002bb8:	d105      	bne.n	8002bc6 <__libc_init_array+0x2e>
 8002bba:	bd70      	pop	{r4, r5, r6, pc}
 8002bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc0:	4798      	blx	r3
 8002bc2:	3601      	adds	r6, #1
 8002bc4:	e7ee      	b.n	8002ba4 <__libc_init_array+0xc>
 8002bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bca:	4798      	blx	r3
 8002bcc:	3601      	adds	r6, #1
 8002bce:	e7f2      	b.n	8002bb6 <__libc_init_array+0x1e>
 8002bd0:	08003520 	.word	0x08003520
 8002bd4:	08003520 	.word	0x08003520
 8002bd8:	08003520 	.word	0x08003520
 8002bdc:	08003524 	.word	0x08003524

08002be0 <__retarget_lock_acquire_recursive>:
 8002be0:	4770      	bx	lr

08002be2 <__retarget_lock_release_recursive>:
 8002be2:	4770      	bx	lr

08002be4 <_free_r>:
 8002be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002be6:	2900      	cmp	r1, #0
 8002be8:	d044      	beq.n	8002c74 <_free_r+0x90>
 8002bea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bee:	9001      	str	r0, [sp, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f1a1 0404 	sub.w	r4, r1, #4
 8002bf6:	bfb8      	it	lt
 8002bf8:	18e4      	addlt	r4, r4, r3
 8002bfa:	f000 f8df 	bl	8002dbc <__malloc_lock>
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <_free_r+0x94>)
 8002c00:	9801      	ldr	r0, [sp, #4]
 8002c02:	6813      	ldr	r3, [r2, #0]
 8002c04:	b933      	cbnz	r3, 8002c14 <_free_r+0x30>
 8002c06:	6063      	str	r3, [r4, #4]
 8002c08:	6014      	str	r4, [r2, #0]
 8002c0a:	b003      	add	sp, #12
 8002c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c10:	f000 b8da 	b.w	8002dc8 <__malloc_unlock>
 8002c14:	42a3      	cmp	r3, r4
 8002c16:	d908      	bls.n	8002c2a <_free_r+0x46>
 8002c18:	6825      	ldr	r5, [r4, #0]
 8002c1a:	1961      	adds	r1, r4, r5
 8002c1c:	428b      	cmp	r3, r1
 8002c1e:	bf01      	itttt	eq
 8002c20:	6819      	ldreq	r1, [r3, #0]
 8002c22:	685b      	ldreq	r3, [r3, #4]
 8002c24:	1949      	addeq	r1, r1, r5
 8002c26:	6021      	streq	r1, [r4, #0]
 8002c28:	e7ed      	b.n	8002c06 <_free_r+0x22>
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	b10b      	cbz	r3, 8002c34 <_free_r+0x50>
 8002c30:	42a3      	cmp	r3, r4
 8002c32:	d9fa      	bls.n	8002c2a <_free_r+0x46>
 8002c34:	6811      	ldr	r1, [r2, #0]
 8002c36:	1855      	adds	r5, r2, r1
 8002c38:	42a5      	cmp	r5, r4
 8002c3a:	d10b      	bne.n	8002c54 <_free_r+0x70>
 8002c3c:	6824      	ldr	r4, [r4, #0]
 8002c3e:	4421      	add	r1, r4
 8002c40:	1854      	adds	r4, r2, r1
 8002c42:	42a3      	cmp	r3, r4
 8002c44:	6011      	str	r1, [r2, #0]
 8002c46:	d1e0      	bne.n	8002c0a <_free_r+0x26>
 8002c48:	681c      	ldr	r4, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	6053      	str	r3, [r2, #4]
 8002c4e:	440c      	add	r4, r1
 8002c50:	6014      	str	r4, [r2, #0]
 8002c52:	e7da      	b.n	8002c0a <_free_r+0x26>
 8002c54:	d902      	bls.n	8002c5c <_free_r+0x78>
 8002c56:	230c      	movs	r3, #12
 8002c58:	6003      	str	r3, [r0, #0]
 8002c5a:	e7d6      	b.n	8002c0a <_free_r+0x26>
 8002c5c:	6825      	ldr	r5, [r4, #0]
 8002c5e:	1961      	adds	r1, r4, r5
 8002c60:	428b      	cmp	r3, r1
 8002c62:	bf04      	itt	eq
 8002c64:	6819      	ldreq	r1, [r3, #0]
 8002c66:	685b      	ldreq	r3, [r3, #4]
 8002c68:	6063      	str	r3, [r4, #4]
 8002c6a:	bf04      	itt	eq
 8002c6c:	1949      	addeq	r1, r1, r5
 8002c6e:	6021      	streq	r1, [r4, #0]
 8002c70:	6054      	str	r4, [r2, #4]
 8002c72:	e7ca      	b.n	8002c0a <_free_r+0x26>
 8002c74:	b003      	add	sp, #12
 8002c76:	bd30      	pop	{r4, r5, pc}
 8002c78:	20000250 	.word	0x20000250

08002c7c <sbrk_aligned>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	4e0e      	ldr	r6, [pc, #56]	; (8002cb8 <sbrk_aligned+0x3c>)
 8002c80:	460c      	mov	r4, r1
 8002c82:	6831      	ldr	r1, [r6, #0]
 8002c84:	4605      	mov	r5, r0
 8002c86:	b911      	cbnz	r1, 8002c8e <sbrk_aligned+0x12>
 8002c88:	f000 fba6 	bl	80033d8 <_sbrk_r>
 8002c8c:	6030      	str	r0, [r6, #0]
 8002c8e:	4621      	mov	r1, r4
 8002c90:	4628      	mov	r0, r5
 8002c92:	f000 fba1 	bl	80033d8 <_sbrk_r>
 8002c96:	1c43      	adds	r3, r0, #1
 8002c98:	d00a      	beq.n	8002cb0 <sbrk_aligned+0x34>
 8002c9a:	1cc4      	adds	r4, r0, #3
 8002c9c:	f024 0403 	bic.w	r4, r4, #3
 8002ca0:	42a0      	cmp	r0, r4
 8002ca2:	d007      	beq.n	8002cb4 <sbrk_aligned+0x38>
 8002ca4:	1a21      	subs	r1, r4, r0
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f000 fb96 	bl	80033d8 <_sbrk_r>
 8002cac:	3001      	adds	r0, #1
 8002cae:	d101      	bne.n	8002cb4 <sbrk_aligned+0x38>
 8002cb0:	f04f 34ff 	mov.w	r4, #4294967295
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}
 8002cb8:	20000254 	.word	0x20000254

08002cbc <_malloc_r>:
 8002cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cc0:	1ccd      	adds	r5, r1, #3
 8002cc2:	f025 0503 	bic.w	r5, r5, #3
 8002cc6:	3508      	adds	r5, #8
 8002cc8:	2d0c      	cmp	r5, #12
 8002cca:	bf38      	it	cc
 8002ccc:	250c      	movcc	r5, #12
 8002cce:	2d00      	cmp	r5, #0
 8002cd0:	4607      	mov	r7, r0
 8002cd2:	db01      	blt.n	8002cd8 <_malloc_r+0x1c>
 8002cd4:	42a9      	cmp	r1, r5
 8002cd6:	d905      	bls.n	8002ce4 <_malloc_r+0x28>
 8002cd8:	230c      	movs	r3, #12
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	2600      	movs	r6, #0
 8002cde:	4630      	mov	r0, r6
 8002ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ce4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002db8 <_malloc_r+0xfc>
 8002ce8:	f000 f868 	bl	8002dbc <__malloc_lock>
 8002cec:	f8d8 3000 	ldr.w	r3, [r8]
 8002cf0:	461c      	mov	r4, r3
 8002cf2:	bb5c      	cbnz	r4, 8002d4c <_malloc_r+0x90>
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	4638      	mov	r0, r7
 8002cf8:	f7ff ffc0 	bl	8002c7c <sbrk_aligned>
 8002cfc:	1c43      	adds	r3, r0, #1
 8002cfe:	4604      	mov	r4, r0
 8002d00:	d155      	bne.n	8002dae <_malloc_r+0xf2>
 8002d02:	f8d8 4000 	ldr.w	r4, [r8]
 8002d06:	4626      	mov	r6, r4
 8002d08:	2e00      	cmp	r6, #0
 8002d0a:	d145      	bne.n	8002d98 <_malloc_r+0xdc>
 8002d0c:	2c00      	cmp	r4, #0
 8002d0e:	d048      	beq.n	8002da2 <_malloc_r+0xe6>
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	4631      	mov	r1, r6
 8002d14:	4638      	mov	r0, r7
 8002d16:	eb04 0903 	add.w	r9, r4, r3
 8002d1a:	f000 fb5d 	bl	80033d8 <_sbrk_r>
 8002d1e:	4581      	cmp	r9, r0
 8002d20:	d13f      	bne.n	8002da2 <_malloc_r+0xe6>
 8002d22:	6821      	ldr	r1, [r4, #0]
 8002d24:	1a6d      	subs	r5, r5, r1
 8002d26:	4629      	mov	r1, r5
 8002d28:	4638      	mov	r0, r7
 8002d2a:	f7ff ffa7 	bl	8002c7c <sbrk_aligned>
 8002d2e:	3001      	adds	r0, #1
 8002d30:	d037      	beq.n	8002da2 <_malloc_r+0xe6>
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	442b      	add	r3, r5
 8002d36:	6023      	str	r3, [r4, #0]
 8002d38:	f8d8 3000 	ldr.w	r3, [r8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d038      	beq.n	8002db2 <_malloc_r+0xf6>
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	42a2      	cmp	r2, r4
 8002d44:	d12b      	bne.n	8002d9e <_malloc_r+0xe2>
 8002d46:	2200      	movs	r2, #0
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	e00f      	b.n	8002d6c <_malloc_r+0xb0>
 8002d4c:	6822      	ldr	r2, [r4, #0]
 8002d4e:	1b52      	subs	r2, r2, r5
 8002d50:	d41f      	bmi.n	8002d92 <_malloc_r+0xd6>
 8002d52:	2a0b      	cmp	r2, #11
 8002d54:	d917      	bls.n	8002d86 <_malloc_r+0xca>
 8002d56:	1961      	adds	r1, r4, r5
 8002d58:	42a3      	cmp	r3, r4
 8002d5a:	6025      	str	r5, [r4, #0]
 8002d5c:	bf18      	it	ne
 8002d5e:	6059      	strne	r1, [r3, #4]
 8002d60:	6863      	ldr	r3, [r4, #4]
 8002d62:	bf08      	it	eq
 8002d64:	f8c8 1000 	streq.w	r1, [r8]
 8002d68:	5162      	str	r2, [r4, r5]
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	4638      	mov	r0, r7
 8002d6e:	f104 060b 	add.w	r6, r4, #11
 8002d72:	f000 f829 	bl	8002dc8 <__malloc_unlock>
 8002d76:	f026 0607 	bic.w	r6, r6, #7
 8002d7a:	1d23      	adds	r3, r4, #4
 8002d7c:	1af2      	subs	r2, r6, r3
 8002d7e:	d0ae      	beq.n	8002cde <_malloc_r+0x22>
 8002d80:	1b9b      	subs	r3, r3, r6
 8002d82:	50a3      	str	r3, [r4, r2]
 8002d84:	e7ab      	b.n	8002cde <_malloc_r+0x22>
 8002d86:	42a3      	cmp	r3, r4
 8002d88:	6862      	ldr	r2, [r4, #4]
 8002d8a:	d1dd      	bne.n	8002d48 <_malloc_r+0x8c>
 8002d8c:	f8c8 2000 	str.w	r2, [r8]
 8002d90:	e7ec      	b.n	8002d6c <_malloc_r+0xb0>
 8002d92:	4623      	mov	r3, r4
 8002d94:	6864      	ldr	r4, [r4, #4]
 8002d96:	e7ac      	b.n	8002cf2 <_malloc_r+0x36>
 8002d98:	4634      	mov	r4, r6
 8002d9a:	6876      	ldr	r6, [r6, #4]
 8002d9c:	e7b4      	b.n	8002d08 <_malloc_r+0x4c>
 8002d9e:	4613      	mov	r3, r2
 8002da0:	e7cc      	b.n	8002d3c <_malloc_r+0x80>
 8002da2:	230c      	movs	r3, #12
 8002da4:	603b      	str	r3, [r7, #0]
 8002da6:	4638      	mov	r0, r7
 8002da8:	f000 f80e 	bl	8002dc8 <__malloc_unlock>
 8002dac:	e797      	b.n	8002cde <_malloc_r+0x22>
 8002dae:	6025      	str	r5, [r4, #0]
 8002db0:	e7dc      	b.n	8002d6c <_malloc_r+0xb0>
 8002db2:	605b      	str	r3, [r3, #4]
 8002db4:	deff      	udf	#255	; 0xff
 8002db6:	bf00      	nop
 8002db8:	20000250 	.word	0x20000250

08002dbc <__malloc_lock>:
 8002dbc:	4801      	ldr	r0, [pc, #4]	; (8002dc4 <__malloc_lock+0x8>)
 8002dbe:	f7ff bf0f 	b.w	8002be0 <__retarget_lock_acquire_recursive>
 8002dc2:	bf00      	nop
 8002dc4:	2000024c 	.word	0x2000024c

08002dc8 <__malloc_unlock>:
 8002dc8:	4801      	ldr	r0, [pc, #4]	; (8002dd0 <__malloc_unlock+0x8>)
 8002dca:	f7ff bf0a 	b.w	8002be2 <__retarget_lock_release_recursive>
 8002dce:	bf00      	nop
 8002dd0:	2000024c 	.word	0x2000024c

08002dd4 <__ssputs_r>:
 8002dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd8:	688e      	ldr	r6, [r1, #8]
 8002dda:	461f      	mov	r7, r3
 8002ddc:	42be      	cmp	r6, r7
 8002dde:	680b      	ldr	r3, [r1, #0]
 8002de0:	4682      	mov	sl, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	4690      	mov	r8, r2
 8002de6:	d82c      	bhi.n	8002e42 <__ssputs_r+0x6e>
 8002de8:	898a      	ldrh	r2, [r1, #12]
 8002dea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002dee:	d026      	beq.n	8002e3e <__ssputs_r+0x6a>
 8002df0:	6965      	ldr	r5, [r4, #20]
 8002df2:	6909      	ldr	r1, [r1, #16]
 8002df4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002df8:	eba3 0901 	sub.w	r9, r3, r1
 8002dfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e00:	1c7b      	adds	r3, r7, #1
 8002e02:	444b      	add	r3, r9
 8002e04:	106d      	asrs	r5, r5, #1
 8002e06:	429d      	cmp	r5, r3
 8002e08:	bf38      	it	cc
 8002e0a:	461d      	movcc	r5, r3
 8002e0c:	0553      	lsls	r3, r2, #21
 8002e0e:	d527      	bpl.n	8002e60 <__ssputs_r+0x8c>
 8002e10:	4629      	mov	r1, r5
 8002e12:	f7ff ff53 	bl	8002cbc <_malloc_r>
 8002e16:	4606      	mov	r6, r0
 8002e18:	b360      	cbz	r0, 8002e74 <__ssputs_r+0xa0>
 8002e1a:	6921      	ldr	r1, [r4, #16]
 8002e1c:	464a      	mov	r2, r9
 8002e1e:	f000 faeb 	bl	80033f8 <memcpy>
 8002e22:	89a3      	ldrh	r3, [r4, #12]
 8002e24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2c:	81a3      	strh	r3, [r4, #12]
 8002e2e:	6126      	str	r6, [r4, #16]
 8002e30:	6165      	str	r5, [r4, #20]
 8002e32:	444e      	add	r6, r9
 8002e34:	eba5 0509 	sub.w	r5, r5, r9
 8002e38:	6026      	str	r6, [r4, #0]
 8002e3a:	60a5      	str	r5, [r4, #8]
 8002e3c:	463e      	mov	r6, r7
 8002e3e:	42be      	cmp	r6, r7
 8002e40:	d900      	bls.n	8002e44 <__ssputs_r+0x70>
 8002e42:	463e      	mov	r6, r7
 8002e44:	6820      	ldr	r0, [r4, #0]
 8002e46:	4632      	mov	r2, r6
 8002e48:	4641      	mov	r1, r8
 8002e4a:	f000 faab 	bl	80033a4 <memmove>
 8002e4e:	68a3      	ldr	r3, [r4, #8]
 8002e50:	1b9b      	subs	r3, r3, r6
 8002e52:	60a3      	str	r3, [r4, #8]
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	4433      	add	r3, r6
 8002e58:	6023      	str	r3, [r4, #0]
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e60:	462a      	mov	r2, r5
 8002e62:	f000 fad7 	bl	8003414 <_realloc_r>
 8002e66:	4606      	mov	r6, r0
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	d1e0      	bne.n	8002e2e <__ssputs_r+0x5a>
 8002e6c:	6921      	ldr	r1, [r4, #16]
 8002e6e:	4650      	mov	r0, sl
 8002e70:	f7ff feb8 	bl	8002be4 <_free_r>
 8002e74:	230c      	movs	r3, #12
 8002e76:	f8ca 3000 	str.w	r3, [sl]
 8002e7a:	89a3      	ldrh	r3, [r4, #12]
 8002e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e80:	81a3      	strh	r3, [r4, #12]
 8002e82:	f04f 30ff 	mov.w	r0, #4294967295
 8002e86:	e7e9      	b.n	8002e5c <__ssputs_r+0x88>

08002e88 <_svfiprintf_r>:
 8002e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e8c:	4698      	mov	r8, r3
 8002e8e:	898b      	ldrh	r3, [r1, #12]
 8002e90:	061b      	lsls	r3, r3, #24
 8002e92:	b09d      	sub	sp, #116	; 0x74
 8002e94:	4607      	mov	r7, r0
 8002e96:	460d      	mov	r5, r1
 8002e98:	4614      	mov	r4, r2
 8002e9a:	d50e      	bpl.n	8002eba <_svfiprintf_r+0x32>
 8002e9c:	690b      	ldr	r3, [r1, #16]
 8002e9e:	b963      	cbnz	r3, 8002eba <_svfiprintf_r+0x32>
 8002ea0:	2140      	movs	r1, #64	; 0x40
 8002ea2:	f7ff ff0b 	bl	8002cbc <_malloc_r>
 8002ea6:	6028      	str	r0, [r5, #0]
 8002ea8:	6128      	str	r0, [r5, #16]
 8002eaa:	b920      	cbnz	r0, 8002eb6 <_svfiprintf_r+0x2e>
 8002eac:	230c      	movs	r3, #12
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb4:	e0d0      	b.n	8003058 <_svfiprintf_r+0x1d0>
 8002eb6:	2340      	movs	r3, #64	; 0x40
 8002eb8:	616b      	str	r3, [r5, #20]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ec4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ec8:	2330      	movs	r3, #48	; 0x30
 8002eca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003070 <_svfiprintf_r+0x1e8>
 8002ece:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ed2:	f04f 0901 	mov.w	r9, #1
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	469a      	mov	sl, r3
 8002eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ede:	b10a      	cbz	r2, 8002ee4 <_svfiprintf_r+0x5c>
 8002ee0:	2a25      	cmp	r2, #37	; 0x25
 8002ee2:	d1f9      	bne.n	8002ed8 <_svfiprintf_r+0x50>
 8002ee4:	ebba 0b04 	subs.w	fp, sl, r4
 8002ee8:	d00b      	beq.n	8002f02 <_svfiprintf_r+0x7a>
 8002eea:	465b      	mov	r3, fp
 8002eec:	4622      	mov	r2, r4
 8002eee:	4629      	mov	r1, r5
 8002ef0:	4638      	mov	r0, r7
 8002ef2:	f7ff ff6f 	bl	8002dd4 <__ssputs_r>
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	f000 80a9 	beq.w	800304e <_svfiprintf_r+0x1c6>
 8002efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002efe:	445a      	add	r2, fp
 8002f00:	9209      	str	r2, [sp, #36]	; 0x24
 8002f02:	f89a 3000 	ldrb.w	r3, [sl]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80a1 	beq.w	800304e <_svfiprintf_r+0x1c6>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f16:	f10a 0a01 	add.w	sl, sl, #1
 8002f1a:	9304      	str	r3, [sp, #16]
 8002f1c:	9307      	str	r3, [sp, #28]
 8002f1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f22:	931a      	str	r3, [sp, #104]	; 0x68
 8002f24:	4654      	mov	r4, sl
 8002f26:	2205      	movs	r2, #5
 8002f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f2c:	4850      	ldr	r0, [pc, #320]	; (8003070 <_svfiprintf_r+0x1e8>)
 8002f2e:	f7fd f95f 	bl	80001f0 <memchr>
 8002f32:	9a04      	ldr	r2, [sp, #16]
 8002f34:	b9d8      	cbnz	r0, 8002f6e <_svfiprintf_r+0xe6>
 8002f36:	06d0      	lsls	r0, r2, #27
 8002f38:	bf44      	itt	mi
 8002f3a:	2320      	movmi	r3, #32
 8002f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f40:	0711      	lsls	r1, r2, #28
 8002f42:	bf44      	itt	mi
 8002f44:	232b      	movmi	r3, #43	; 0x2b
 8002f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002f50:	d015      	beq.n	8002f7e <_svfiprintf_r+0xf6>
 8002f52:	9a07      	ldr	r2, [sp, #28]
 8002f54:	4654      	mov	r4, sl
 8002f56:	2000      	movs	r0, #0
 8002f58:	f04f 0c0a 	mov.w	ip, #10
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f62:	3b30      	subs	r3, #48	; 0x30
 8002f64:	2b09      	cmp	r3, #9
 8002f66:	d94d      	bls.n	8003004 <_svfiprintf_r+0x17c>
 8002f68:	b1b0      	cbz	r0, 8002f98 <_svfiprintf_r+0x110>
 8002f6a:	9207      	str	r2, [sp, #28]
 8002f6c:	e014      	b.n	8002f98 <_svfiprintf_r+0x110>
 8002f6e:	eba0 0308 	sub.w	r3, r0, r8
 8002f72:	fa09 f303 	lsl.w	r3, r9, r3
 8002f76:	4313      	orrs	r3, r2
 8002f78:	9304      	str	r3, [sp, #16]
 8002f7a:	46a2      	mov	sl, r4
 8002f7c:	e7d2      	b.n	8002f24 <_svfiprintf_r+0x9c>
 8002f7e:	9b03      	ldr	r3, [sp, #12]
 8002f80:	1d19      	adds	r1, r3, #4
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	9103      	str	r1, [sp, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bfbb      	ittet	lt
 8002f8a:	425b      	neglt	r3, r3
 8002f8c:	f042 0202 	orrlt.w	r2, r2, #2
 8002f90:	9307      	strge	r3, [sp, #28]
 8002f92:	9307      	strlt	r3, [sp, #28]
 8002f94:	bfb8      	it	lt
 8002f96:	9204      	strlt	r2, [sp, #16]
 8002f98:	7823      	ldrb	r3, [r4, #0]
 8002f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8002f9c:	d10c      	bne.n	8002fb8 <_svfiprintf_r+0x130>
 8002f9e:	7863      	ldrb	r3, [r4, #1]
 8002fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8002fa2:	d134      	bne.n	800300e <_svfiprintf_r+0x186>
 8002fa4:	9b03      	ldr	r3, [sp, #12]
 8002fa6:	1d1a      	adds	r2, r3, #4
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	9203      	str	r2, [sp, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bfb8      	it	lt
 8002fb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fb4:	3402      	adds	r4, #2
 8002fb6:	9305      	str	r3, [sp, #20]
 8002fb8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003080 <_svfiprintf_r+0x1f8>
 8002fbc:	7821      	ldrb	r1, [r4, #0]
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	4650      	mov	r0, sl
 8002fc2:	f7fd f915 	bl	80001f0 <memchr>
 8002fc6:	b138      	cbz	r0, 8002fd8 <_svfiprintf_r+0x150>
 8002fc8:	9b04      	ldr	r3, [sp, #16]
 8002fca:	eba0 000a 	sub.w	r0, r0, sl
 8002fce:	2240      	movs	r2, #64	; 0x40
 8002fd0:	4082      	lsls	r2, r0
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	3401      	adds	r4, #1
 8002fd6:	9304      	str	r3, [sp, #16]
 8002fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fdc:	4825      	ldr	r0, [pc, #148]	; (8003074 <_svfiprintf_r+0x1ec>)
 8002fde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fe2:	2206      	movs	r2, #6
 8002fe4:	f7fd f904 	bl	80001f0 <memchr>
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d038      	beq.n	800305e <_svfiprintf_r+0x1d6>
 8002fec:	4b22      	ldr	r3, [pc, #136]	; (8003078 <_svfiprintf_r+0x1f0>)
 8002fee:	bb1b      	cbnz	r3, 8003038 <_svfiprintf_r+0x1b0>
 8002ff0:	9b03      	ldr	r3, [sp, #12]
 8002ff2:	3307      	adds	r3, #7
 8002ff4:	f023 0307 	bic.w	r3, r3, #7
 8002ff8:	3308      	adds	r3, #8
 8002ffa:	9303      	str	r3, [sp, #12]
 8002ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ffe:	4433      	add	r3, r6
 8003000:	9309      	str	r3, [sp, #36]	; 0x24
 8003002:	e768      	b.n	8002ed6 <_svfiprintf_r+0x4e>
 8003004:	fb0c 3202 	mla	r2, ip, r2, r3
 8003008:	460c      	mov	r4, r1
 800300a:	2001      	movs	r0, #1
 800300c:	e7a6      	b.n	8002f5c <_svfiprintf_r+0xd4>
 800300e:	2300      	movs	r3, #0
 8003010:	3401      	adds	r4, #1
 8003012:	9305      	str	r3, [sp, #20]
 8003014:	4619      	mov	r1, r3
 8003016:	f04f 0c0a 	mov.w	ip, #10
 800301a:	4620      	mov	r0, r4
 800301c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003020:	3a30      	subs	r2, #48	; 0x30
 8003022:	2a09      	cmp	r2, #9
 8003024:	d903      	bls.n	800302e <_svfiprintf_r+0x1a6>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0c6      	beq.n	8002fb8 <_svfiprintf_r+0x130>
 800302a:	9105      	str	r1, [sp, #20]
 800302c:	e7c4      	b.n	8002fb8 <_svfiprintf_r+0x130>
 800302e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003032:	4604      	mov	r4, r0
 8003034:	2301      	movs	r3, #1
 8003036:	e7f0      	b.n	800301a <_svfiprintf_r+0x192>
 8003038:	ab03      	add	r3, sp, #12
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	462a      	mov	r2, r5
 800303e:	4b0f      	ldr	r3, [pc, #60]	; (800307c <_svfiprintf_r+0x1f4>)
 8003040:	a904      	add	r1, sp, #16
 8003042:	4638      	mov	r0, r7
 8003044:	f3af 8000 	nop.w
 8003048:	1c42      	adds	r2, r0, #1
 800304a:	4606      	mov	r6, r0
 800304c:	d1d6      	bne.n	8002ffc <_svfiprintf_r+0x174>
 800304e:	89ab      	ldrh	r3, [r5, #12]
 8003050:	065b      	lsls	r3, r3, #25
 8003052:	f53f af2d 	bmi.w	8002eb0 <_svfiprintf_r+0x28>
 8003056:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003058:	b01d      	add	sp, #116	; 0x74
 800305a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800305e:	ab03      	add	r3, sp, #12
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	462a      	mov	r2, r5
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <_svfiprintf_r+0x1f4>)
 8003066:	a904      	add	r1, sp, #16
 8003068:	4638      	mov	r0, r7
 800306a:	f000 f879 	bl	8003160 <_printf_i>
 800306e:	e7eb      	b.n	8003048 <_svfiprintf_r+0x1c0>
 8003070:	080034e4 	.word	0x080034e4
 8003074:	080034ee 	.word	0x080034ee
 8003078:	00000000 	.word	0x00000000
 800307c:	08002dd5 	.word	0x08002dd5
 8003080:	080034ea 	.word	0x080034ea

08003084 <_printf_common>:
 8003084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003088:	4616      	mov	r6, r2
 800308a:	4699      	mov	r9, r3
 800308c:	688a      	ldr	r2, [r1, #8]
 800308e:	690b      	ldr	r3, [r1, #16]
 8003090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003094:	4293      	cmp	r3, r2
 8003096:	bfb8      	it	lt
 8003098:	4613      	movlt	r3, r2
 800309a:	6033      	str	r3, [r6, #0]
 800309c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030a0:	4607      	mov	r7, r0
 80030a2:	460c      	mov	r4, r1
 80030a4:	b10a      	cbz	r2, 80030aa <_printf_common+0x26>
 80030a6:	3301      	adds	r3, #1
 80030a8:	6033      	str	r3, [r6, #0]
 80030aa:	6823      	ldr	r3, [r4, #0]
 80030ac:	0699      	lsls	r1, r3, #26
 80030ae:	bf42      	ittt	mi
 80030b0:	6833      	ldrmi	r3, [r6, #0]
 80030b2:	3302      	addmi	r3, #2
 80030b4:	6033      	strmi	r3, [r6, #0]
 80030b6:	6825      	ldr	r5, [r4, #0]
 80030b8:	f015 0506 	ands.w	r5, r5, #6
 80030bc:	d106      	bne.n	80030cc <_printf_common+0x48>
 80030be:	f104 0a19 	add.w	sl, r4, #25
 80030c2:	68e3      	ldr	r3, [r4, #12]
 80030c4:	6832      	ldr	r2, [r6, #0]
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	42ab      	cmp	r3, r5
 80030ca:	dc26      	bgt.n	800311a <_printf_common+0x96>
 80030cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030d0:	1e13      	subs	r3, r2, #0
 80030d2:	6822      	ldr	r2, [r4, #0]
 80030d4:	bf18      	it	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	0692      	lsls	r2, r2, #26
 80030da:	d42b      	bmi.n	8003134 <_printf_common+0xb0>
 80030dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030e0:	4649      	mov	r1, r9
 80030e2:	4638      	mov	r0, r7
 80030e4:	47c0      	blx	r8
 80030e6:	3001      	adds	r0, #1
 80030e8:	d01e      	beq.n	8003128 <_printf_common+0xa4>
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	6922      	ldr	r2, [r4, #16]
 80030ee:	f003 0306 	and.w	r3, r3, #6
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	bf02      	ittt	eq
 80030f6:	68e5      	ldreq	r5, [r4, #12]
 80030f8:	6833      	ldreq	r3, [r6, #0]
 80030fa:	1aed      	subeq	r5, r5, r3
 80030fc:	68a3      	ldr	r3, [r4, #8]
 80030fe:	bf0c      	ite	eq
 8003100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003104:	2500      	movne	r5, #0
 8003106:	4293      	cmp	r3, r2
 8003108:	bfc4      	itt	gt
 800310a:	1a9b      	subgt	r3, r3, r2
 800310c:	18ed      	addgt	r5, r5, r3
 800310e:	2600      	movs	r6, #0
 8003110:	341a      	adds	r4, #26
 8003112:	42b5      	cmp	r5, r6
 8003114:	d11a      	bne.n	800314c <_printf_common+0xc8>
 8003116:	2000      	movs	r0, #0
 8003118:	e008      	b.n	800312c <_printf_common+0xa8>
 800311a:	2301      	movs	r3, #1
 800311c:	4652      	mov	r2, sl
 800311e:	4649      	mov	r1, r9
 8003120:	4638      	mov	r0, r7
 8003122:	47c0      	blx	r8
 8003124:	3001      	adds	r0, #1
 8003126:	d103      	bne.n	8003130 <_printf_common+0xac>
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
 800312c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003130:	3501      	adds	r5, #1
 8003132:	e7c6      	b.n	80030c2 <_printf_common+0x3e>
 8003134:	18e1      	adds	r1, r4, r3
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	2030      	movs	r0, #48	; 0x30
 800313a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800313e:	4422      	add	r2, r4
 8003140:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003144:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003148:	3302      	adds	r3, #2
 800314a:	e7c7      	b.n	80030dc <_printf_common+0x58>
 800314c:	2301      	movs	r3, #1
 800314e:	4622      	mov	r2, r4
 8003150:	4649      	mov	r1, r9
 8003152:	4638      	mov	r0, r7
 8003154:	47c0      	blx	r8
 8003156:	3001      	adds	r0, #1
 8003158:	d0e6      	beq.n	8003128 <_printf_common+0xa4>
 800315a:	3601      	adds	r6, #1
 800315c:	e7d9      	b.n	8003112 <_printf_common+0x8e>
	...

08003160 <_printf_i>:
 8003160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003164:	7e0f      	ldrb	r7, [r1, #24]
 8003166:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003168:	2f78      	cmp	r7, #120	; 0x78
 800316a:	4691      	mov	r9, r2
 800316c:	4680      	mov	r8, r0
 800316e:	460c      	mov	r4, r1
 8003170:	469a      	mov	sl, r3
 8003172:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003176:	d807      	bhi.n	8003188 <_printf_i+0x28>
 8003178:	2f62      	cmp	r7, #98	; 0x62
 800317a:	d80a      	bhi.n	8003192 <_printf_i+0x32>
 800317c:	2f00      	cmp	r7, #0
 800317e:	f000 80d4 	beq.w	800332a <_printf_i+0x1ca>
 8003182:	2f58      	cmp	r7, #88	; 0x58
 8003184:	f000 80c0 	beq.w	8003308 <_printf_i+0x1a8>
 8003188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800318c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003190:	e03a      	b.n	8003208 <_printf_i+0xa8>
 8003192:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003196:	2b15      	cmp	r3, #21
 8003198:	d8f6      	bhi.n	8003188 <_printf_i+0x28>
 800319a:	a101      	add	r1, pc, #4	; (adr r1, 80031a0 <_printf_i+0x40>)
 800319c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031a0:	080031f9 	.word	0x080031f9
 80031a4:	0800320d 	.word	0x0800320d
 80031a8:	08003189 	.word	0x08003189
 80031ac:	08003189 	.word	0x08003189
 80031b0:	08003189 	.word	0x08003189
 80031b4:	08003189 	.word	0x08003189
 80031b8:	0800320d 	.word	0x0800320d
 80031bc:	08003189 	.word	0x08003189
 80031c0:	08003189 	.word	0x08003189
 80031c4:	08003189 	.word	0x08003189
 80031c8:	08003189 	.word	0x08003189
 80031cc:	08003311 	.word	0x08003311
 80031d0:	08003239 	.word	0x08003239
 80031d4:	080032cb 	.word	0x080032cb
 80031d8:	08003189 	.word	0x08003189
 80031dc:	08003189 	.word	0x08003189
 80031e0:	08003333 	.word	0x08003333
 80031e4:	08003189 	.word	0x08003189
 80031e8:	08003239 	.word	0x08003239
 80031ec:	08003189 	.word	0x08003189
 80031f0:	08003189 	.word	0x08003189
 80031f4:	080032d3 	.word	0x080032d3
 80031f8:	682b      	ldr	r3, [r5, #0]
 80031fa:	1d1a      	adds	r2, r3, #4
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	602a      	str	r2, [r5, #0]
 8003200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003208:	2301      	movs	r3, #1
 800320a:	e09f      	b.n	800334c <_printf_i+0x1ec>
 800320c:	6820      	ldr	r0, [r4, #0]
 800320e:	682b      	ldr	r3, [r5, #0]
 8003210:	0607      	lsls	r7, r0, #24
 8003212:	f103 0104 	add.w	r1, r3, #4
 8003216:	6029      	str	r1, [r5, #0]
 8003218:	d501      	bpl.n	800321e <_printf_i+0xbe>
 800321a:	681e      	ldr	r6, [r3, #0]
 800321c:	e003      	b.n	8003226 <_printf_i+0xc6>
 800321e:	0646      	lsls	r6, r0, #25
 8003220:	d5fb      	bpl.n	800321a <_printf_i+0xba>
 8003222:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003226:	2e00      	cmp	r6, #0
 8003228:	da03      	bge.n	8003232 <_printf_i+0xd2>
 800322a:	232d      	movs	r3, #45	; 0x2d
 800322c:	4276      	negs	r6, r6
 800322e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003232:	485a      	ldr	r0, [pc, #360]	; (800339c <_printf_i+0x23c>)
 8003234:	230a      	movs	r3, #10
 8003236:	e012      	b.n	800325e <_printf_i+0xfe>
 8003238:	682b      	ldr	r3, [r5, #0]
 800323a:	6820      	ldr	r0, [r4, #0]
 800323c:	1d19      	adds	r1, r3, #4
 800323e:	6029      	str	r1, [r5, #0]
 8003240:	0605      	lsls	r5, r0, #24
 8003242:	d501      	bpl.n	8003248 <_printf_i+0xe8>
 8003244:	681e      	ldr	r6, [r3, #0]
 8003246:	e002      	b.n	800324e <_printf_i+0xee>
 8003248:	0641      	lsls	r1, r0, #25
 800324a:	d5fb      	bpl.n	8003244 <_printf_i+0xe4>
 800324c:	881e      	ldrh	r6, [r3, #0]
 800324e:	4853      	ldr	r0, [pc, #332]	; (800339c <_printf_i+0x23c>)
 8003250:	2f6f      	cmp	r7, #111	; 0x6f
 8003252:	bf0c      	ite	eq
 8003254:	2308      	moveq	r3, #8
 8003256:	230a      	movne	r3, #10
 8003258:	2100      	movs	r1, #0
 800325a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800325e:	6865      	ldr	r5, [r4, #4]
 8003260:	60a5      	str	r5, [r4, #8]
 8003262:	2d00      	cmp	r5, #0
 8003264:	bfa2      	ittt	ge
 8003266:	6821      	ldrge	r1, [r4, #0]
 8003268:	f021 0104 	bicge.w	r1, r1, #4
 800326c:	6021      	strge	r1, [r4, #0]
 800326e:	b90e      	cbnz	r6, 8003274 <_printf_i+0x114>
 8003270:	2d00      	cmp	r5, #0
 8003272:	d04b      	beq.n	800330c <_printf_i+0x1ac>
 8003274:	4615      	mov	r5, r2
 8003276:	fbb6 f1f3 	udiv	r1, r6, r3
 800327a:	fb03 6711 	mls	r7, r3, r1, r6
 800327e:	5dc7      	ldrb	r7, [r0, r7]
 8003280:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003284:	4637      	mov	r7, r6
 8003286:	42bb      	cmp	r3, r7
 8003288:	460e      	mov	r6, r1
 800328a:	d9f4      	bls.n	8003276 <_printf_i+0x116>
 800328c:	2b08      	cmp	r3, #8
 800328e:	d10b      	bne.n	80032a8 <_printf_i+0x148>
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	07de      	lsls	r6, r3, #31
 8003294:	d508      	bpl.n	80032a8 <_printf_i+0x148>
 8003296:	6923      	ldr	r3, [r4, #16]
 8003298:	6861      	ldr	r1, [r4, #4]
 800329a:	4299      	cmp	r1, r3
 800329c:	bfde      	ittt	le
 800329e:	2330      	movle	r3, #48	; 0x30
 80032a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032a8:	1b52      	subs	r2, r2, r5
 80032aa:	6122      	str	r2, [r4, #16]
 80032ac:	f8cd a000 	str.w	sl, [sp]
 80032b0:	464b      	mov	r3, r9
 80032b2:	aa03      	add	r2, sp, #12
 80032b4:	4621      	mov	r1, r4
 80032b6:	4640      	mov	r0, r8
 80032b8:	f7ff fee4 	bl	8003084 <_printf_common>
 80032bc:	3001      	adds	r0, #1
 80032be:	d14a      	bne.n	8003356 <_printf_i+0x1f6>
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	b004      	add	sp, #16
 80032c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	f043 0320 	orr.w	r3, r3, #32
 80032d0:	6023      	str	r3, [r4, #0]
 80032d2:	4833      	ldr	r0, [pc, #204]	; (80033a0 <_printf_i+0x240>)
 80032d4:	2778      	movs	r7, #120	; 0x78
 80032d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	6829      	ldr	r1, [r5, #0]
 80032de:	061f      	lsls	r7, r3, #24
 80032e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80032e4:	d402      	bmi.n	80032ec <_printf_i+0x18c>
 80032e6:	065f      	lsls	r7, r3, #25
 80032e8:	bf48      	it	mi
 80032ea:	b2b6      	uxthmi	r6, r6
 80032ec:	07df      	lsls	r7, r3, #31
 80032ee:	bf48      	it	mi
 80032f0:	f043 0320 	orrmi.w	r3, r3, #32
 80032f4:	6029      	str	r1, [r5, #0]
 80032f6:	bf48      	it	mi
 80032f8:	6023      	strmi	r3, [r4, #0]
 80032fa:	b91e      	cbnz	r6, 8003304 <_printf_i+0x1a4>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	f023 0320 	bic.w	r3, r3, #32
 8003302:	6023      	str	r3, [r4, #0]
 8003304:	2310      	movs	r3, #16
 8003306:	e7a7      	b.n	8003258 <_printf_i+0xf8>
 8003308:	4824      	ldr	r0, [pc, #144]	; (800339c <_printf_i+0x23c>)
 800330a:	e7e4      	b.n	80032d6 <_printf_i+0x176>
 800330c:	4615      	mov	r5, r2
 800330e:	e7bd      	b.n	800328c <_printf_i+0x12c>
 8003310:	682b      	ldr	r3, [r5, #0]
 8003312:	6826      	ldr	r6, [r4, #0]
 8003314:	6961      	ldr	r1, [r4, #20]
 8003316:	1d18      	adds	r0, r3, #4
 8003318:	6028      	str	r0, [r5, #0]
 800331a:	0635      	lsls	r5, r6, #24
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	d501      	bpl.n	8003324 <_printf_i+0x1c4>
 8003320:	6019      	str	r1, [r3, #0]
 8003322:	e002      	b.n	800332a <_printf_i+0x1ca>
 8003324:	0670      	lsls	r0, r6, #25
 8003326:	d5fb      	bpl.n	8003320 <_printf_i+0x1c0>
 8003328:	8019      	strh	r1, [r3, #0]
 800332a:	2300      	movs	r3, #0
 800332c:	6123      	str	r3, [r4, #16]
 800332e:	4615      	mov	r5, r2
 8003330:	e7bc      	b.n	80032ac <_printf_i+0x14c>
 8003332:	682b      	ldr	r3, [r5, #0]
 8003334:	1d1a      	adds	r2, r3, #4
 8003336:	602a      	str	r2, [r5, #0]
 8003338:	681d      	ldr	r5, [r3, #0]
 800333a:	6862      	ldr	r2, [r4, #4]
 800333c:	2100      	movs	r1, #0
 800333e:	4628      	mov	r0, r5
 8003340:	f7fc ff56 	bl	80001f0 <memchr>
 8003344:	b108      	cbz	r0, 800334a <_printf_i+0x1ea>
 8003346:	1b40      	subs	r0, r0, r5
 8003348:	6060      	str	r0, [r4, #4]
 800334a:	6863      	ldr	r3, [r4, #4]
 800334c:	6123      	str	r3, [r4, #16]
 800334e:	2300      	movs	r3, #0
 8003350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003354:	e7aa      	b.n	80032ac <_printf_i+0x14c>
 8003356:	6923      	ldr	r3, [r4, #16]
 8003358:	462a      	mov	r2, r5
 800335a:	4649      	mov	r1, r9
 800335c:	4640      	mov	r0, r8
 800335e:	47d0      	blx	sl
 8003360:	3001      	adds	r0, #1
 8003362:	d0ad      	beq.n	80032c0 <_printf_i+0x160>
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	079b      	lsls	r3, r3, #30
 8003368:	d413      	bmi.n	8003392 <_printf_i+0x232>
 800336a:	68e0      	ldr	r0, [r4, #12]
 800336c:	9b03      	ldr	r3, [sp, #12]
 800336e:	4298      	cmp	r0, r3
 8003370:	bfb8      	it	lt
 8003372:	4618      	movlt	r0, r3
 8003374:	e7a6      	b.n	80032c4 <_printf_i+0x164>
 8003376:	2301      	movs	r3, #1
 8003378:	4632      	mov	r2, r6
 800337a:	4649      	mov	r1, r9
 800337c:	4640      	mov	r0, r8
 800337e:	47d0      	blx	sl
 8003380:	3001      	adds	r0, #1
 8003382:	d09d      	beq.n	80032c0 <_printf_i+0x160>
 8003384:	3501      	adds	r5, #1
 8003386:	68e3      	ldr	r3, [r4, #12]
 8003388:	9903      	ldr	r1, [sp, #12]
 800338a:	1a5b      	subs	r3, r3, r1
 800338c:	42ab      	cmp	r3, r5
 800338e:	dcf2      	bgt.n	8003376 <_printf_i+0x216>
 8003390:	e7eb      	b.n	800336a <_printf_i+0x20a>
 8003392:	2500      	movs	r5, #0
 8003394:	f104 0619 	add.w	r6, r4, #25
 8003398:	e7f5      	b.n	8003386 <_printf_i+0x226>
 800339a:	bf00      	nop
 800339c:	080034f5 	.word	0x080034f5
 80033a0:	08003506 	.word	0x08003506

080033a4 <memmove>:
 80033a4:	4288      	cmp	r0, r1
 80033a6:	b510      	push	{r4, lr}
 80033a8:	eb01 0402 	add.w	r4, r1, r2
 80033ac:	d902      	bls.n	80033b4 <memmove+0x10>
 80033ae:	4284      	cmp	r4, r0
 80033b0:	4623      	mov	r3, r4
 80033b2:	d807      	bhi.n	80033c4 <memmove+0x20>
 80033b4:	1e43      	subs	r3, r0, #1
 80033b6:	42a1      	cmp	r1, r4
 80033b8:	d008      	beq.n	80033cc <memmove+0x28>
 80033ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033c2:	e7f8      	b.n	80033b6 <memmove+0x12>
 80033c4:	4402      	add	r2, r0
 80033c6:	4601      	mov	r1, r0
 80033c8:	428a      	cmp	r2, r1
 80033ca:	d100      	bne.n	80033ce <memmove+0x2a>
 80033cc:	bd10      	pop	{r4, pc}
 80033ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033d6:	e7f7      	b.n	80033c8 <memmove+0x24>

080033d8 <_sbrk_r>:
 80033d8:	b538      	push	{r3, r4, r5, lr}
 80033da:	4d06      	ldr	r5, [pc, #24]	; (80033f4 <_sbrk_r+0x1c>)
 80033dc:	2300      	movs	r3, #0
 80033de:	4604      	mov	r4, r0
 80033e0:	4608      	mov	r0, r1
 80033e2:	602b      	str	r3, [r5, #0]
 80033e4:	f7fd fd16 	bl	8000e14 <_sbrk>
 80033e8:	1c43      	adds	r3, r0, #1
 80033ea:	d102      	bne.n	80033f2 <_sbrk_r+0x1a>
 80033ec:	682b      	ldr	r3, [r5, #0]
 80033ee:	b103      	cbz	r3, 80033f2 <_sbrk_r+0x1a>
 80033f0:	6023      	str	r3, [r4, #0]
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
 80033f4:	20000248 	.word	0x20000248

080033f8 <memcpy>:
 80033f8:	440a      	add	r2, r1
 80033fa:	4291      	cmp	r1, r2
 80033fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003400:	d100      	bne.n	8003404 <memcpy+0xc>
 8003402:	4770      	bx	lr
 8003404:	b510      	push	{r4, lr}
 8003406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800340a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800340e:	4291      	cmp	r1, r2
 8003410:	d1f9      	bne.n	8003406 <memcpy+0xe>
 8003412:	bd10      	pop	{r4, pc}

08003414 <_realloc_r>:
 8003414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003418:	4680      	mov	r8, r0
 800341a:	4614      	mov	r4, r2
 800341c:	460e      	mov	r6, r1
 800341e:	b921      	cbnz	r1, 800342a <_realloc_r+0x16>
 8003420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003424:	4611      	mov	r1, r2
 8003426:	f7ff bc49 	b.w	8002cbc <_malloc_r>
 800342a:	b92a      	cbnz	r2, 8003438 <_realloc_r+0x24>
 800342c:	f7ff fbda 	bl	8002be4 <_free_r>
 8003430:	4625      	mov	r5, r4
 8003432:	4628      	mov	r0, r5
 8003434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003438:	f000 f81b 	bl	8003472 <_malloc_usable_size_r>
 800343c:	4284      	cmp	r4, r0
 800343e:	4607      	mov	r7, r0
 8003440:	d802      	bhi.n	8003448 <_realloc_r+0x34>
 8003442:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003446:	d812      	bhi.n	800346e <_realloc_r+0x5a>
 8003448:	4621      	mov	r1, r4
 800344a:	4640      	mov	r0, r8
 800344c:	f7ff fc36 	bl	8002cbc <_malloc_r>
 8003450:	4605      	mov	r5, r0
 8003452:	2800      	cmp	r0, #0
 8003454:	d0ed      	beq.n	8003432 <_realloc_r+0x1e>
 8003456:	42bc      	cmp	r4, r7
 8003458:	4622      	mov	r2, r4
 800345a:	4631      	mov	r1, r6
 800345c:	bf28      	it	cs
 800345e:	463a      	movcs	r2, r7
 8003460:	f7ff ffca 	bl	80033f8 <memcpy>
 8003464:	4631      	mov	r1, r6
 8003466:	4640      	mov	r0, r8
 8003468:	f7ff fbbc 	bl	8002be4 <_free_r>
 800346c:	e7e1      	b.n	8003432 <_realloc_r+0x1e>
 800346e:	4635      	mov	r5, r6
 8003470:	e7df      	b.n	8003432 <_realloc_r+0x1e>

08003472 <_malloc_usable_size_r>:
 8003472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003476:	1f18      	subs	r0, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	bfbc      	itt	lt
 800347c:	580b      	ldrlt	r3, [r1, r0]
 800347e:	18c0      	addlt	r0, r0, r3
 8003480:	4770      	bx	lr
	...

08003484 <_init>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	bf00      	nop
 8003488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348a:	bc08      	pop	{r3}
 800348c:	469e      	mov	lr, r3
 800348e:	4770      	bx	lr

08003490 <_fini>:
 8003490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003492:	bf00      	nop
 8003494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003496:	bc08      	pop	{r3}
 8003498:	469e      	mov	lr, r3
 800349a:	4770      	bx	lr
